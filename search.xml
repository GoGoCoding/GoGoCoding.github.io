<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis 事务</title>
      <link href="/2021/05/01/Redis/Redis%20%E4%BA%8B%E5%8A%A1/"/>
      <url>/2021/05/01/Redis/Redis%20%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>Redis 是没有回滚机制的，通过 WATCH、MULTI、EXEC、DISCARD 四个命令，勉强实现了原子性、一致性和隔离性，因为是内存缓存，所以持久性是没法保证的。</p><h1 id="原子性"><a class="markdownIt-Anchor" href="#原子性"></a> 原子性</h1><ul><li>命令入队时就报错，会放弃事务执行，保证原子性；</li><li>命令入队时没报错，实际执行时报错，不保证原子性；</li><li>EXEC 命令执行时实例故障，如果开启了 AOF 日志，可以保证原子性。</li></ul><h1 id="一致性"><a class="markdownIt-Anchor" href="#一致性"></a> 一致性</h1><ul><li>命令入队时就报错，在这种情况下，事务本身就会被放弃执行，所以可以保证数据库的一致性</li><li>命令入队时没报错，实际执行时报错，在这种情况下，有错误的命令不会被执行，正确的命令可以正常执行，也不会改变数据库的一致性。</li><li>EXEC 命令执行时实例发生故障，Redis 事务机制对一致性属性是有保证的</li></ul><h1 id="隔离性"><a class="markdownIt-Anchor" href="#隔离性"></a> 隔离性</h1><ul><li>可以通过WATCH 机制提供事务隔离性。</li></ul><h1 id="持久性"><a class="markdownIt-Anchor" href="#持久性"></a> 持久性</h1><p>因为 Redis 是内存数据库，所以，数据是否持久化保存完全取决于 Redis 的持久化配置模式。<br />如果 Redis 没有使用 RDB 或 AOF，那么事务的持久化属性肯定得不到保证。如果 Redis 使用了 RDB 模式，那么，在一个事务执行后，而下一次的 RDB 快照还未执行前，如果发生了实例宕机，这种情况下，事务修改的数据也是不能保证持久化的。如果 Redis 采用了 AOF 模式，因为 AOF 模式的三种配置选项 no、everysec 和 always 都会存在数据丢失的情况，所以，事务的持久性属性也还是得不到保证。所以，不管 Redis 采用什么持久化模式，事务的持久性属性是得不到保证的。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis Q&amp;A</title>
      <link href="/2021/04/06/Redis/Redis%20Q&amp;A/"/>
      <url>/2021/04/06/Redis/Redis%20Q&amp;A/</url>
      
        <content type="html"><![CDATA[<h1 id="问题1和跟-redis-相比simplekv-还缺少什么"><a class="markdownIt-Anchor" href="#问题1和跟-redis-相比simplekv-还缺少什么"></a> 问题1：和跟 Redis 相比，SimpleKV 还缺少什么？</h1><p><img src="http://qiniu.gogocoding.cn/mweb/simpleKV%20vs%20Redis.jpg" alt="simpleKV vs Redis" /></p><h1 id="问题2整数数组和压缩列表作为底层数据结构的优势是什么"><a class="markdownIt-Anchor" href="#问题2整数数组和压缩列表作为底层数据结构的优势是什么"></a> 问题2：整数数组和压缩列表作为底层数据结构的优势是什么？</h1><p>整数数组和压缩列表的设计，充分体现了 Redis“又快又省”特点中的“省”，也就是节省内存空间。整数数组和压缩列表都是在内存中分配一块地址连续的空间，然后把集合中的元素一个接一个地放在这块空间内，非常紧凑。因为元素是挨个连续放置的，我们不用再通过额外的指针把元素串接起来，这就避免了额外指针带来的空间开销。<br />Redis 之所以采用不同的数据结构，其实是在性能和内存使用效率之间进行的平衡</p><h1 id="问题3redis-基本-io-模型中还有哪些潜在的性能瓶颈"><a class="markdownIt-Anchor" href="#问题3redis-基本-io-模型中还有哪些潜在的性能瓶颈"></a> 问题3：Redis 基本 IO 模型中还有哪些潜在的性能瓶颈？</h1><p>在 Redis 基本 IO 模型中，主要是主线程在执行操作，任何耗时的操作，例如 bigkey、全量返回等操作，都是潜在的性能瓶颈。</p><h1 id="问题-4aof-重写过程中有没有其他潜在的阻塞风险"><a class="markdownIt-Anchor" href="#问题-4aof-重写过程中有没有其他潜在的阻塞风险"></a> 问题 4：AOF 重写过程中有没有其他潜在的阻塞风险？</h1><p>风险一：Redis 主线程 fork 创建 bgrewriteaof 子进程时，内核需要创建用于管理子进程的相关数据结构，这些数据结构在操作系统中通常叫作进程控制块（Process Control Block，简称为 PCB）。内核要把主线程的 PCB 内容拷贝给子进程。这个创建和拷贝过程由内核执行，是会阻塞主线程的。而且，在拷贝过程中，子进程要拷贝父进程的页表，这个过程的耗时和 Redis 实例的内存大小有关。如果 Redis 实例内存大，页表就会大，fork 执行时间就会长，这就会给主线程带来阻塞风险。</p><p>风险二：bgrewriteaof 子进程会和主线程共享内存。当主线程收到新写或修改的操作时，主线程会申请新的内存空间，用来保存新写或修改的数据，如果操作的是 bigkey，也就是数据量大的集合类型数据，那么，主线程会因为申请大空间而面临阻塞风险。因为操作系统在分配内存空间时，有查找和锁的开销，这就会导致阻塞。</p><h1 id="问题-5aof-重写为什么不共享使用-aof-本身的日志"><a class="markdownIt-Anchor" href="#问题-5aof-重写为什么不共享使用-aof-本身的日志"></a> 问题 5：AOF 重写为什么不共享使用 AOF 本身的日志？</h1><p>如果都用 AOF 日志的话，主线程要写，bgrewriteaof 子进程也要写，这两者会竞争文件系统的锁，这就会对 Redis 主线程的性能造成影响。</p><h1 id="问题6为什么主从库间的复制不使用-aof"><a class="markdownIt-Anchor" href="#问题6为什么主从库间的复制不使用-aof"></a> 问题6：为什么主从库间的复制不使用 AOF？</h1><ol><li>RDB 文件是二进制文件，无论是要把 RDB 写入磁盘，还是要通过网络传输 RDB，IO 效率都比记录和传输 AOF 的高。</li><li>在从库端进行恢复时，用 RDB 的恢复效率要高于用 AOF。</li></ol><h1 id="问题-7在主从切换过程中客户端能否正常地进行请求操作呢"><a class="markdownIt-Anchor" href="#问题-7在主从切换过程中客户端能否正常地进行请求操作呢"></a> 问题 7：在主从切换过程中，客户端能否正常地进行请求操作呢？</h1><p>主从集群一般是采用读写分离模式，当主库故障后，客户端仍然可以把读请求发送给从库，让从库服务。但是，对于写请求操作，客户端就无法执行了。</p><h1 id="问题-8如果想要应用程序不感知服务的中断还需要哨兵或客户端再做些什么吗"><a class="markdownIt-Anchor" href="#问题-8如果想要应用程序不感知服务的中断还需要哨兵或客户端再做些什么吗"></a> 问题 8：如果想要应用程序不感知服务的中断，还需要哨兵或客户端再做些什么吗？</h1><p>一方面，客户端需要能缓存应用发送的写请求。只要不是同步写操作（Redis 应用场景一般也没有同步写），写请求通常不会在应用程序的关键路径上，所以，客户端缓存写请求后，给应用程序返回一个确认就行。<br />另一方面，主从切换完成后，客户端要能和新主库重新建立连接，哨兵需要提供订阅频道，让客户端能够订阅到新主库的信息。同时，客户端也需要能主动和哨兵通信，询问新主库的信息。</p><h1 id="问题-95-个哨兵实例的集群quorum-值设为-2-在运行过程中如果有-3-个哨兵实例都发生故障了此时redis-主库如果有故障还能正确地判断主库客观下线吗如果可以的话还能进行主从库自动切换吗"><a class="markdownIt-Anchor" href="#问题-95-个哨兵实例的集群quorum-值设为-2-在运行过程中如果有-3-个哨兵实例都发生故障了此时redis-主库如果有故障还能正确地判断主库客观下线吗如果可以的话还能进行主从库自动切换吗"></a> 问题 9：5 个哨兵实例的集群，quorum 值设为 2。在运行过程中，如果有 3 个哨兵实例都发生故障了，此时，Redis 主库如果有故障，还能正确地判断主库“客观下线”吗？如果可以的话，还能进行主从库自动切换吗？</h1><p>因为判定主库“客观下线”的依据是，认为主库“主观下线”的哨兵个数要大于等于 quorum 值，现在还剩 2 个哨兵实例，个数正好等于 quorum 值，所以还能正常判断主库是否处于“客观下线”状态。如果一个哨兵想要执行主从切换，就要获到半数以上的哨兵投票赞成，也就是至少需要 3 个哨兵投票赞成。但是，现在只有 2 个哨兵了，所以就无法进行主从切换了。</p><h1 id="问题-10哨兵实例是不是越多越好呢如果同时调大-down-after-milliseconds-值对减少误判是不是也有好处"><a class="markdownIt-Anchor" href="#问题-10哨兵实例是不是越多越好呢如果同时调大-down-after-milliseconds-值对减少误判是不是也有好处"></a> 问题 10：哨兵实例是不是越多越好呢？如果同时调大 down-after-milliseconds 值，对减少误判是不是也有好处？</h1><p>哨兵实例越多，误判率会越低，但是在判定主库下线和选举 Leader 时，实例需要拿到的赞成票数也越多，等待所有哨兵投完票的时间可能也会相应增加，主从库切换的时间也会变长，客户端容易堆积较多的请求操作，可能会导致客户端请求溢出，从而造成请求丢失。如果业务层对 Redis 的操作有响应时间要求，就可能会因为新主库一直没有选定，新操作无法执行而发生超时报警。</p><p>调大 down-after-milliseconds 后，可能会导致这样的情况：主库实际已经发生故障了，但是哨兵过了很长时间才判断出来，这就会影响到 Redis 对业务的可用性。</p><h1 id="问题11为什么-redis-不直接用一个表把键值对和实例的对应关系记录下来"><a class="markdownIt-Anchor" href="#问题11为什么-redis-不直接用一个表把键值对和实例的对应关系记录下来"></a> 问题11：为什么 Redis 不直接用一个表，把键值对和实例的对应关系记录下来？</h1><p>如果使用表记录键值对和实例的对应关系，一旦键值对和实例的对应关系发生了变化（例如实例有增减或者数据重新分布），就要修改表。如果是单线程操作表，那么所有操作都要串行执行，性能慢；如果是多线程操作表，就涉及到加锁开销。此外，如果数据量非常大，使用表记录键值对和实例的对应关系，需要的额外存储空间也会增加。基于哈希槽计算时，虽然也要记录哈希槽和实例的对应关系，但是哈希槽的个数要比键值对的个数少很多，无论是修改哈希槽和实例的对应关系，还是使用额外空间存储哈希槽和实例的对应关系，都比直接记录键值对和实例的关系的开销小得多。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Q&amp;A </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>切片集群</title>
      <link href="/2021/04/06/Redis/%E5%88%87%E7%89%87%E9%9B%86%E7%BE%A4%EF%BC%8C%E6%98%AF%E8%AF%A5%E5%A2%9E%E5%8A%A0%E5%86%85%E5%AD%98%E8%BF%98%E6%98%AF%E5%8A%A0%E5%AE%9E%E4%BE%8B/"/>
      <url>/2021/04/06/Redis/%E5%88%87%E7%89%87%E9%9B%86%E7%BE%A4%EF%BC%8C%E6%98%AF%E8%AF%A5%E5%A2%9E%E5%8A%A0%E5%86%85%E5%AD%98%E8%BF%98%E6%98%AF%E5%8A%A0%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="如何保存更多数据"><a class="markdownIt-Anchor" href="#如何保存更多数据"></a> 如何保存更多数据</h1><p>Redis 应对数据量增多的两种方案：纵向扩展（scale up）和横向扩展（scale out）。</p><ul><li><strong>纵向扩展</strong>：升级单个 Redis 实例的资源配置，包括增加内存容量、增加磁盘容量、使用更高配置的 CPU。就像下图中，原来的实例内存是 8GB，硬盘是 50GB，纵向扩展后，内存增加到 24GB，磁盘增加到 150GB。</li><li><strong>横向扩展</strong>：横向增加当前 Redis 实例的个数，就像下图中，原来使用 1 个 8GB 内存、50GB 磁盘的实例，现在使用三个相同配置的实例。</li></ul><p><img src="http://qiniu.gogocoding.cn/mweb/%E7%BA%B5%E5%90%91%E5%92%8C%E6%A8%AA%E5%90%91%E6%89%A9%E5%B1%95.jpg" alt="纵向和横向扩展" /></p><h1 id="数据切片和实例的对应分布关系"><a class="markdownIt-Anchor" href="#数据切片和实例的对应分布关系"></a> 数据切片和实例的对应分布关系</h1><p>Redis Cluster 方案采用哈希槽（Hash Slot，接下来我会直接称之为 Slot），来处理数据和实例之间的映射关系。在 Redis Cluster 方案中，一个切片集群共有 16384 个哈希槽，这些哈希槽类似于数据分区，每个键值对都会根据它的 key，被映射到一个哈希槽中。</p><p>具体的映射过程分为两大步：首先根据键值对的 key，按照CRC16 算法计算一个 16 bit 的值；然后，再用这个 16bit 值对 16384 取模，得到 0~16383 范围内的模数，每个模数代表一个相应编号的哈希槽</p><p>我们在部署 Redis Cluster 方案时，可以使用 cluster create 命令创建集群，此时，Redis 会自动把这些槽平均分布在集群实例上。例如，如果集群中有 N 个实例，那么，每个实例上的槽个数为 16384/N 个。</p><p>手动分配：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 172.16.19.3 –p 6379 cluster addslots 0,1</span><br><span class="line">redis-cli -h 172.16.19.4 –p 6379 cluster addslots 2,3</span><br><span class="line">redis-cli -h 172.16.19.5 –p 6379 cluster addslots 4</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 切片集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 概述</title>
      <link href="/2021/03/31/Redis/Redis/"/>
      <url>/2021/03/31/Redis/Redis/</url>
      
        <content type="html"><![CDATA[<p><img src="http://qiniu.gogocoding.cn/mweb/79da7093ed998a99d9abe91e610b74e7.jpg" alt="79da7093ed998a99d9abe91e610b74e7" /></p><p>“两大维度”就是指系统维度和应用维度，“三大主线”也就是指高性能、高可靠和高可扩展（可以简称为“三高”）</p><p>Redis涉及知识点可以按照这三大主线，给它们分下类，就像图片中展示的那样，具体如下：</p><ul><li><strong>高性能主线</strong>，包括线程模型、数据结构、持久化、网络框架；</li><li><strong>高可靠主线</strong>，包括主从复制、哨兵机制；</li><li><strong>高可扩展主线</strong>，包括数据分片、负载均衡。</li></ul><p>Redis 问题画像<br /><img src="http://qiniu.gogocoding.cn/mweb/%E7%94%BB%E5%83%8F.jpeg" alt="画像" /></p><p>Redis 中主要的数据类型和底层数据结构<br /><img src="http://qiniu.gogocoding.cn/mweb/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.jpg" alt="数据结构" /></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis AOF</title>
      <link href="/2021/03/31/Redis/Redis%E5%AE%95%E6%9C%BA%EF%BC%8C%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1/"/>
      <url>/2021/03/31/Redis/Redis%E5%AE%95%E6%9C%BA%EF%BC%8C%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="宕机了redis如何避免数据丢失"><a class="markdownIt-Anchor" href="#宕机了redis如何避免数据丢失"></a> 宕机了，Redis如何避免数据丢失？</h1><ol><li>从后端数据库恢复这些数据</li><li>AOF（Append Only File）日志</li><li>RDB（Redis DataBase）快照</li></ol><h2 id="aof"><a class="markdownIt-Anchor" href="#aof"></a> AOF</h2><p>三种写回策略<br /><img src="http://qiniu.gogocoding.cn/mweb/%E5%86%99%E5%9B%9E%E7%AD%96%E7%95%A5.jpg" alt="写回策略" /></p><p>这里主要存在以下三个方面的性能问题：</p><ol><li>文件系统本身对文件大小有限制，无法保存过大的文件；</li><li>如果文件太大，之后再往里面追加命令记录的话，效率也会变低；</li><li>如果发生宕机，AOF 中记录的命令要一个个被重新执行，用于故障恢复，如果日志文件太大，整个恢复过程就会非常缓慢，这就会影响到 Redis 的正常使用。</li></ol><h3 id="日志文件太大了怎么办"><a class="markdownIt-Anchor" href="#日志文件太大了怎么办"></a> 日志文件太大了怎么办？</h3><p><strong>重写机制</strong>： AOF 重写机制就是在重写时，Redis 根据数据库的现状创建一个新的 AOF 文件，也就是说，读取数据库中的所有键值对，然后对每一个键值对用一条命令记录它的写入</p><h3 id="aof-重写会阻塞吗"><a class="markdownIt-Anchor" href="#aof-重写会阻塞吗"></a> AOF 重写会阻塞吗?</h3><p>每次 AOF 重写时，Redis 会先执行一个内存拷贝，用于重写；然后，使用两个日志保证在重写过程中，新写入的数据不会丢失。而且，因为 Redis 采用额外的线程进行数据重写，所以，这个过程并不会阻塞主线程。<br /><img src="http://qiniu.gogocoding.cn/mweb/%E9%87%8D%E5%86%99.jpg" alt="重写" /></p><h2 id="rdb"><a class="markdownIt-Anchor" href="#rdb"></a> RDB</h2><p>RDB与AOF 相比，RDB 记录的是某一时刻的数据，并不是操作，所以，在做数据恢复时，我们可以直接把 RDB 文件读入内存，很快地完成恢复。</p><p>Redis 提供了两个命令来生成 RDB 文件，分别是 save 和 bgsave。</p><ul><li>save：在主线程中执行，会导致阻塞；</li><li>bgsave：创建一个子进程，专门用于写入 RDB 文件，避免了主线程的阻塞，这也是 Redis RDB 文件生成的默认配置。</li></ul><h1 id="主从同步"><a class="markdownIt-Anchor" href="#主从同步"></a> 主从同步</h1><p>Redis 提供了主从库模式，以保证数据副本的一致，主从库之间采用的是读写分离的方式。</p><ul><li>读操作：主库、从库都可以接收；</li><li>写操作：首先到主库执行，然后，主库将写操作同步给从库。</li></ul><h1 id="哨兵机制主库挂了如何不间断服务"><a class="markdownIt-Anchor" href="#哨兵机制主库挂了如何不间断服务"></a> 哨兵机制：主库挂了，如何不间断服务？</h1><p>如果主库挂了，我们就需要运行一个新主库，比如说把一个从库切换为主库，把它当成主库。这就涉及到三个问题：</p><ol><li>主库真的挂了吗？</li><li>该选择哪个从库作为主库？</li><li>怎么把新主库的相关信息通知给从库和客户端呢？</li></ol><p>这就要提到哨兵机制了。在 Redis 主从集群中，哨兵机制是实现主从库自动切换的关键机制，它有效地解决了主从复制模式下故障转移的这三个问题。</p><p>哨兵其实就是一个运行在特殊模式下的 Redis 进程，主从库实例运行的同时，它也在运行。哨兵主要负责的就是三个任务：监控、选主（选择主库）和通知。</p><h2 id="通知"><a class="markdownIt-Anchor" href="#通知"></a> 通知</h2><p>通知任务相对来说比较简单，哨兵只需要把新主库信息发给从库和客户端，让它们和新主库建立连接就行，并不涉及决策的逻辑</p><h2 id="监控"><a class="markdownIt-Anchor" href="#监控"></a> 监控</h2><p>监控是指哨兵进程在运行时，周期性地给所有的主从库发送 PING 命令，检测它们是否仍然在线运行。如果从库没有在规定时间内响应哨兵的 PING 命令，哨兵就会把它标记为“下线状态”；同样，如果主库也没有在规定时间内响应哨兵的 PING 命令，哨兵就会判定主库下线，然后开始自动切换主库的流程。</p><h2 id="选主"><a class="markdownIt-Anchor" href="#选主"></a> 选主</h2><p>先保证所选的从库仍然在线运行，检查从库的当前在线状态，还要判断它之前的网络连接状态。<br />第一轮：优先级最高的从库得分高。<br />第二轮：和旧主库同步程度最接近的从库得分高。<br />第三轮：ID 号小的从库得分高。</p><p>git</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 数据恢复 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ETCD 优化思路</title>
      <link href="/2021/03/22/etcd/etcd%20%E4%BC%98%E5%8C%96%E6%80%9D%E8%B7%AF/"/>
      <url>/2021/03/22/etcd/etcd%20%E4%BC%98%E5%8C%96%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="优化读性能"><a class="markdownIt-Anchor" href="#优化读性能"></a> 优化读性能</h1><ol><li>我们可通过 etcd clientv3 自带的 Round-robin 负载均衡算法或者 Load Balancer，尽量确保整个集群负载均衡。</li><li>在开启鉴权场景时，建议你尽量使用证书而不是密码认证，避免校验密码的昂贵开销。</li><li>根据业务场景选择合适的读模式，串行读比线性度性能提高 30% 以上，延时降低一倍。线性读性能受节点之间 RTT 延时、磁盘 IO 延时、当前写 QPS 等多重因素影响。</li><li>最容易被大家忽视的就是写 QPS 对读 QPS 的影响，我通过一系列压测数据，整理成一个表格，让你更直观感受写 QPS 对读性能的影响。多可用区部署会导致节点 RTT 延时增高，读性能下降。因此你需要在高可用和高性能上做取舍和平衡。</li><li>在访问数据前，你的读性能还可能会受授权性能、expensive read request、treeIndex 及 boltdb 的锁等影响。你需要遵循最佳实践，避免一个请求查询大量 key、大 key-value 等，否则会导致读性能剧烈下降。</li></ol><h1 id="k8s大集群核心问题"><a class="markdownIt-Anchor" href="#k8s大集群核心问题"></a> K8S大集群核心问题</h1><p>expensive request、db size、key-value 大小</p><ol><li>针对 expensive request， Kubernetes 采用了分页机制、资源按 namespace 拆分部署策略、核心的 Informer 机制、优化 client 与 kube-apiserver 连接异常后的 Watch 恢复效率的 bookmark 机制、以及进一步优化 kube-apiserver 重建场景下 Watch 恢复效率的 Notify 机制</li><li>针对 db size 和 key-value 大小，Kubernetes 社区的解决方案核心思想是拆分，通过 Lease 和 EndpointSlice 资源对象成功解决了大规模集群过程遇到 db size 和 key-value 瓶颈。</li></ol>]]></content>
      
      
      <categories>
          
          <category> ETCD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ETCD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>容器编排与Kubernetes作业管理</title>
      <link href="/2020/12/07/Kubernetes/%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E4%B8%8EKubernetes%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86/"/>
      <url>/2020/12/07/Kubernetes/%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E4%B8%8EKubernetes%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="容器编排与kubernetes作业管理"><a class="markdownIt-Anchor" href="#容器编排与kubernetes作业管理"></a> 容器编排与Kubernetes作业管理</h1><h2 id="deployment"><a class="markdownIt-Anchor" href="#deployment"></a> Deployment</h2><p>Deployment实现了 Kubernetes 项目中一个非常重要的功能：Pod 的“水平扩展 / 收缩”（horizontal scaling out/in）。这个功能，是从 PaaS 时代开始，一个平台级项目就必须具备的编排能力。这个能力的实现，依赖的是 Kubernetes 项目中的一个非常重要的概念（API 对象）：ReplicaSet。</p><p><img src="http://qiniu.gogocoding.cn/mweb/Dep-Rep.png" alt="Dep-Rep-w300" /></p><p>Deployment 四个状态</p><ol><li>DESIRED：用户期望的 Pod 副本个数（spec.replicas 的值）；</li><li>CURRENT：当前处于 Running 状态的 Pod 的个数；</li><li>UP-TO-DATE：当前处于最新版本的 Pod 的个数，所谓最新版本指的是 Pod 的 Spec 部分与 Deployment 里 Pod 模板里定义的完全一致；</li><li>AVAILABLE：当前已经可用的 Pod 的个数，即：既是 Running 状态，又是最新版本，并且已经处于 Ready（健康检查正确）状态的 Pod 的个数。</li></ol><p>只有这个 AVAILABLE 字段，描述的才是用户所期望的最终状态。</p><h2 id="statefulset"><a class="markdownIt-Anchor" href="#statefulset"></a> StatefulSet</h2><p>StatefulSet 其实就是一种特殊的 Deployment，而其独特之处在于，它的每个 Pod 都被编号了。而且，这个编号会体现在 Pod 的名字和 hostname 等标识信息上，这不仅代表了 Pod 的创建顺序，也是 Pod 的重要网络标识（即：在整个集群里唯一的、可被访问的身份）。有了这个编号后，StatefulSet 就使用 Kubernetes 里的两个标准功能：Headless Service 和 PV/PVC，实现了对 Pod 的拓扑状态和存储状态的维护。</p><p>实例之间有不对等关系，以及实例对外部数据有依赖关系的应用，就被称为“有状态应用”（Stateful Application）</p><p>StatefulSet 这个控制器的主要作用之一，就是使用 Pod 模板创建 Pod 的时候，对它们进行编号，并且按照编号顺序逐一完成创建工作。而当 StatefulSet 的“控制循环”发现 Pod 的“实际状态”与“期望状态”不一致，需要新建或者删除 Pod 进行“调谐”的时候，它会严格按照这些 Pod 编号的顺序，逐一完成这些操作。</p><p>StatefulSet 把真实世界里的应用状态，抽象为了两种情况：</p><ol><li><strong>拓扑状态</strong>：这种情况意味着，应用的多个实例之间不是完全对等的关系。这些应用实例，必须按照某些顺序启动，比如应用的主节点 A 要先于从节点 B 启动。而如果你把 A 和 B 两个 Pod 删除掉，它们再次被创建出来时也必须严格按照这个顺序才行。并且，新创建出来的 Pod，必须和原来 Pod 的网络标识一样，这样原先的访问者才能使用同样的方法，访问到这个新 Pod。</li><li><strong>存储状态</strong>：这种情况意味着，应用的多个实例分别绑定了不同的存储数据。对于这些应用实例来说，Pod A 第一次读取到的数据，和隔了十分钟之后再次读取到的数据，应该是同一份，哪怕在此期间 Pod A 被重新创建过。这种情况最典型的例子，就是一个数据库应用的多个存储实例。</li></ol><h3 id="statefulset-的工作原理"><a class="markdownIt-Anchor" href="#statefulset-的工作原理"></a> StatefulSet 的工作原理</h3><p>作为一个应用开发者，我可能对持久化存储项目（比如 Ceph、GlusterFS 等）一窍不通，也不知道公司的 Kubernetes 集群里到底是怎么搭建出来的，我也自然不会编写它们对应的 Volume 定义文件。所谓“术业有专攻”，这些关于 Volume 的管理和远程持久化存储的知识，不仅超越了开发者的知识储备，还会有暴露公司基础设施秘密的风险。</p><p>Kubernetes 项目引入了一组叫作 Persistent Volume Claim（PVC）和 Persistent Volume（PV）的 API 对象，大大降低了用户声明和使用持久化 Volume 的门槛。Kubernetes 中 PVC 和 PV 的设计，实际上类似于“接口”和“实现”的思想。开发者只要知道并会使用“接口”，即：PVC；而运维人员则负责给“接口”绑定具体的实现，即：PV。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  name: web</span><br><span class="line">spec:</span><br><span class="line">  serviceName: &quot;nginx&quot;</span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.9.1</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">          name: web</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: www</span><br><span class="line">          mountPath: &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</span><br><span class="line">  volumeClaimTemplates:</span><br><span class="line">  - metadata:</span><br><span class="line">      name: www</span><br><span class="line">    spec:</span><br><span class="line">      accessModes:</span><br><span class="line">      - ReadWriteOnce</span><br><span class="line">      resources:</span><br><span class="line">        requests:</span><br><span class="line">          storage: 1Gi</span><br></pre></td></tr></table></figure><p>StatefulSet 的工作原理：</p><ol><li>首先，StatefulSet 的控制器直接管理的是 Pod。StatefulSet 区分这些实例的方式，就是通过在 Pod 的名字里加上事先约定好的编号。</li><li>其次，Kubernetes 通过 Headless Service，为这些有编号的 Pod，在 DNS 服务器中生成带有同样编号的 DNS 记录。</li><li>最后，StatefulSet 还为每一个 Pod 分配并创建一个同样编号的 PVC。这样，Kubernetes 就可以通过 Persistent Volume 机制为这个 PVC 绑定上对应的 PV，从而保证了每一个 Pod 都拥有一个独立的 Volume。</li></ol><p>在这种情况下，即使 Pod 被删除，它所对应的 PVC 和 PV 依然会保留下来。所以当这个 Pod 被重新创建出来之后，Kubernetes 会为它找到同样编号的 PVC，挂载这个 PVC 对应的 Volume，从而获取到以前保存在 Volume 里的数据。</p><h2 id="daemonset"><a class="markdownIt-Anchor" href="#daemonset"></a> DaemonSet</h2><p>DaemonSet 的主要作用，是让你在 Kubernetes 集群里，运行一个 Daemon Pod，这个pod有如下三个特征</p><ol><li>这个 Pod 运行在 Kubernetes 集群里的每一个节点（Node）上；</li><li>每个节点上只有一个这样的 Pod 实例；</li><li>当有新的节点加入 Kubernetes 集群后，该 Pod 会自动地在新节点上被创建出来；而当旧节点被删除后，它上面的 Pod 也相应地会被回收掉。</li></ol><p>Daemon Pod 的意义是非常重要的。比如：</p><ol><li>各种网络插件的 Agent 组件，都必须运行在每一个节点上，用来处理这个节点上的容器网络；</li><li>各种存储插件的 Agent 组件，也必须运行在每一个节点上，用来在这个节点上挂载远程存储目录，操作容器的 Volume 目录；</li><li>各种监控组件和日志组件，也必须运行在每一个节点上，负责这个节点上的监控信息和日志搜集。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: fluentd-elasticsearch</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: fluentd-logging</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      name: fluentd-elasticsearch</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: fluentd-elasticsearch</span><br><span class="line">    spec:</span><br><span class="line">      tolerations:</span><br><span class="line">      - key: node-role.kubernetes.io&#x2F;master</span><br><span class="line">        effect: NoSchedule</span><br><span class="line">      containers:</span><br><span class="line">      - name: fluentd-elasticsearch</span><br><span class="line">        image: k8s.gcr.io&#x2F;fluentd-elasticsearch:1.20</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            memory: 200Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 200Mi</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: varlog</span><br><span class="line">          mountPath: &#x2F;var&#x2F;log</span><br><span class="line">        - name: varlibdockercontainers</span><br><span class="line">          mountPath: &#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers</span><br><span class="line">          readOnly: true</span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      volumes:</span><br><span class="line">      - name: varlog</span><br><span class="line">        hostPath:</span><br><span class="line">          path: &#x2F;var&#x2F;log</span><br><span class="line">      - name: varlibdockercontainers</span><br><span class="line">        hostPath:</span><br><span class="line">          path: &#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers</span><br></pre></td></tr></table></figure><h2 id="job"><a class="markdownIt-Anchor" href="#job"></a> Job</h2><p>有一类作业“离线业务”，或者叫作 Batch Job（计算业务）。这种业务在计算完成后就直接退出了，而此时如果你依然用 Deployment 来管理这种业务的话，就会发现 Pod 会在计算结束后退出，然后被 Deployment Controller 不断地重启。</p><p>Job API 对象的定义非常简单，我来举个例子，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: batch&#x2F;v1</span><br><span class="line">kind: Job</span><br><span class="line">metadata:</span><br><span class="line">  name: pi</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: pi</span><br><span class="line">        image: resouer&#x2F;ubuntu-bc </span><br><span class="line">        command: [&quot;sh&quot;, &quot;-c&quot;, &quot;echo &#39;scale&#x3D;10000; 4*a(1)&#39; | bc -l &quot;]</span><br><span class="line">      restartPolicy: Never</span><br><span class="line">  backoffLimit: 4</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> Cloud Native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pod</title>
      <link href="/2020/12/07/Kubernetes/Pod/"/>
      <url>/2020/12/07/Kubernetes/Pod/</url>
      
        <content type="html"><![CDATA[<h1 id="pod"><a class="markdownIt-Anchor" href="#pod"></a> Pod</h1><h2 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h2><p>Pod，而不是容器，才是 Kubernetes 项目中的最小编排单位。凡是调度、网络、存储，以及安全相关的属性，基本上是 Pod 级别的；凡是跟容器的 Linux Namespace 相关的属性，也一定是 Pod 级别的。</p><h3 id="nodeselector"><a class="markdownIt-Anchor" href="#nodeselector"></a> NodeSelector</h3><p>NodeSelector是一个供用户将 Pod 与 Node 进行绑定的字段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">...</span><br><span class="line">spec:</span><br><span class="line"> nodeSelector:</span><br><span class="line">   disktype: ssd</span><br></pre></td></tr></table></figure><h3 id="hostaliases"><a class="markdownIt-Anchor" href="#hostaliases"></a> HostAliases</h3><p>HostAliases：定义了 Pod 的 hosts 文件（比如 /etc/hosts）里的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">...</span><br><span class="line">spec:</span><br><span class="line">  hostAliases:</span><br><span class="line">  - ip: &quot;10.1.2.3&quot;</span><br><span class="line">    hostnames:</span><br><span class="line">    - &quot;foo.remote&quot;</span><br><span class="line">    - &quot;bar.remote&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="imagepullpolicy"><a class="markdownIt-Anchor" href="#imagepullpolicy"></a> ImagePullPolicy</h3><p>ImagePullPolicy定义了镜像拉取的策略。</p><ul><li>Always：每次都重新拉取镜像</li><li>Never ：从来不拉取新镜像</li><li>IfNotPresent：如果本地没有就拉取</li></ul><h3 id="lifecycle"><a class="markdownIt-Anchor" href="#lifecycle"></a> Lifecycle</h3><p>Lifecycle 定义的是 Container Lifecycle Hooks。顾名思义，Container Lifecycle Hooks 的作用，是在容器状态发生变化时触发一系列“钩子”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: lifecycle-demo</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: lifecycle-demo-container</span><br><span class="line">    image: nginx</span><br><span class="line">    lifecycle:</span><br><span class="line">      postStart:</span><br><span class="line">        exec:</span><br><span class="line">          command: [&quot;&#x2F;bin&#x2F;sh&quot;, &quot;-c&quot;, &quot;echo Hello from the postStart handler &gt; &#x2F;usr&#x2F;share&#x2F;message&quot;]</span><br><span class="line">      preStop:</span><br><span class="line">        exec:</span><br><span class="line">          command: [&quot;&#x2F;usr&#x2F;sbin&#x2F;nginx&quot;,&quot;-s&quot;,&quot;quit&quot;]</span><br></pre></td></tr></table></figure><h3 id="projected-volume"><a class="markdownIt-Anchor" href="#projected-volume"></a> Projected Volume</h3><p>Projected Volume的作用，是为容器提供预先定义好的数据</p><ol><li>Secret</li><li>ConfigMap</li><li>Downward API</li><li>ServiceAccountToken</li></ol><p><code>Secret</code>把 Pod 想要访问的加密数据，存放到 Etcd中，然后通过volume的方式挂载到pod中，已提供给pod中的容器使用 加密数据-&gt;etcd-&gt;volume-&gt;pod-&gt;container</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: test-projected-volume </span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: test-secret-volume</span><br><span class="line">    image: busybox</span><br><span class="line">    args:</span><br><span class="line">    - sleep</span><br><span class="line">    - &quot;86400&quot;</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: mysql-cred</span><br><span class="line">      mountPath: &quot;&#x2F;projected-volume&quot;</span><br><span class="line">      readOnly: true</span><br><span class="line">  volumes:</span><br><span class="line">  - name: mysql-cred</span><br><span class="line">    projected:</span><br><span class="line">      sources:</span><br><span class="line">      - secret:</span><br><span class="line">          name: user</span><br><span class="line">      - secret:</span><br><span class="line">          name: pass</span><br></pre></td></tr></table></figure><p><code>ConfigMap</code> 和<code>Secret</code>类似，它与 Secret 的区别在于，ConfigMap 保存的是不需要加密的、应用所需的配置信息。而 ConfigMap 的用法几乎与 Secret 完全相同：你可以使用 kubectl create configmap 从文件或者目录创建 ConfigMap，也可以直接编写 ConfigMap 对象的 YAML 文件。</p><p><code>Downward API</code>的作用是：让 Pod 里的容器能够直接获取到这个 Pod API 对象本身的信息。有两种方式可以将 Pod 和 Container 字段呈现给运行中的容器： 1、Environment variables 2、Volume Files 这两种呈现 Pod 和 Container 字段的方式都称为 Downward API。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: test-downwardapi-volume</span><br><span class="line">  labels:</span><br><span class="line">    zone: us-est-coast</span><br><span class="line">    cluster: test-cluster1</span><br><span class="line">    rack: rack-22</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: client-container</span><br><span class="line">      image: k8s.gcr.io&#x2F;busybox</span><br><span class="line">      command: [&quot;sh&quot;, &quot;-c&quot;]</span><br><span class="line">      args:</span><br><span class="line">      - while true; do</span><br><span class="line">          if [[ -e &#x2F;etc&#x2F;podinfo&#x2F;labels ]]; then</span><br><span class="line">            echo -en &#39;\n\n&#39;; cat &#x2F;etc&#x2F;podinfo&#x2F;labels; fi;</span><br><span class="line">          sleep 5;</span><br><span class="line">        done;</span><br><span class="line">      volumeMounts:</span><br><span class="line">        - name: podinfo</span><br><span class="line">          mountPath: &#x2F;etc&#x2F;podinfo</span><br><span class="line">          readOnly: false</span><br><span class="line">  volumes:</span><br><span class="line">    - name: podinfo</span><br><span class="line">      projected:</span><br><span class="line">        sources:</span><br><span class="line">        - downwardAPI:</span><br><span class="line">            items:</span><br><span class="line">              - path: &quot;labels&quot;</span><br><span class="line">                fieldRef:</span><br><span class="line">                  fieldPath: metadata.labels</span><br></pre></td></tr></table></figure><p>Downward API 支持的字段已经非常丰富了，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. 使用fieldRef可以声明使用:</span><br><span class="line">spec.nodeName - 宿主机名字</span><br><span class="line">status.hostIP - 宿主机IP</span><br><span class="line">metadata.name - Pod的名字</span><br><span class="line">metadata.namespace - Pod的Namespace</span><br><span class="line">status.podIP - Pod的IP</span><br><span class="line">spec.serviceAccountName - Pod的Service Account的名字</span><br><span class="line">metadata.uid - Pod的UID</span><br><span class="line">metadata.labels[&#39;&lt;KEY&gt;&#39;] - 指定&lt;KEY&gt;的Label值</span><br><span class="line">metadata.annotations[&#39;&lt;KEY&gt;&#39;] - 指定&lt;KEY&gt;的Annotation值</span><br><span class="line">metadata.labels - Pod的所有Label</span><br><span class="line">metadata.annotations - Pod的所有Annotation</span><br><span class="line"></span><br><span class="line">2. 使用resourceFieldRef可以声明使用:</span><br><span class="line">容器的CPU limit</span><br><span class="line">容器的CPU request</span><br><span class="line">容器的memory limit</span><br><span class="line">容器的memory request</span><br></pre></td></tr></table></figure><p>其实，Secret、ConfigMap，以及 Downward API 这三种 Projected Volume 定义的信息，大多还可以通过环境变量的方式出现在容器里。但是，通过环境变量获取这些信息的方式，不具备自动更新的能力。所以，一般情况下建议使用 Volume 文件的方式获取这些信息。</p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> Cloud Native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Micro Services</title>
      <link href="/2020/10/30/Notes/Micro%20Services/"/>
      <url>/2020/10/30/Notes/Micro%20Services/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> MicroServices </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MicroServices </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/09/08/Interview/MQ/"/>
      <url>/2020/09/08/Interview/MQ/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a class="markdownIt-Anchor" href="#"></a> </h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/09/08/Interview/Micro/"/>
      <url>/2020/09/08/Interview/Micro/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a class="markdownIt-Anchor" href="#"></a> </h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/09/08/Interview/MySQL/"/>
      <url>/2020/09/08/Interview/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a class="markdownIt-Anchor" href="#"></a> </h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>树</title>
      <link href="/2020/08/11/Data%20Structure%20and%20Algorithm/%E6%A0%91/"/>
      <url>/2020/08/11/Data%20Structure%20and%20Algorithm/%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="1-树总共包含4节内容-具体如下"><a class="markdownIt-Anchor" href="#1-树总共包含4节内容-具体如下"></a> 1. 树，总共包含4节内容。具体如下：</h1><ol><li>树、二叉树</li><li>二叉查找树</li><li>平衡二叉树、红黑树</li><li>递归树</li></ol><h1 id="2-树"><a class="markdownIt-Anchor" href="#2-树"></a> 2 树</h1><h2 id="21-树的常用概念"><a class="markdownIt-Anchor" href="#21-树的常用概念"></a> 2.1. 树的常用概念</h2><p>根节点、叶子节点、父节点、子节点、兄弟节点，还有节点的高度、深度以及层数，树的高度。</p><h2 id="22-概念解释"><a class="markdownIt-Anchor" href="#22-概念解释"></a> 2.2 概念解释</h2><p>节点：树中的每个元素称为节点<br />父子关系：相邻两节点的连线，称为父子关系<br />根节点：没有父节点的节点<br />叶子节点：没有子节点的节点<br />父节点：指向子节点的节点<br />子节点：被父节点指向的节点<br />兄弟节点：具有相同父节点的多个节点称为兄弟节点关系<br />节点的高度：节点到叶子节点的最长路径所包含的边数<br />节点的深度：根节点到节点的路径所包含的边数<br />节点的层数：节点的深度+1（根节点的层数是1）<br />树的高度：等于根节点的高度</p><h1 id="3-二叉树"><a class="markdownIt-Anchor" href="#3-二叉树"></a> 3. 二叉树</h1><h2 id="31-概念"><a class="markdownIt-Anchor" href="#31-概念"></a> 3.1. 概念</h2><h3 id="311-什么是二叉树"><a class="markdownIt-Anchor" href="#311-什么是二叉树"></a> 3.1.1. 什么是二叉树？</h3><p>每个节点最多只有2个子节点的树，这两个节点分别是左子节点和右子节点。</p><h3 id="312-什么是满二叉树"><a class="markdownIt-Anchor" href="#312-什么是满二叉树"></a> 3.1.2. 什么是满二叉树？</h3><p>有一种二叉树，除了叶子节点外，每个节点都有左右两个子节点，这种二叉树叫做满二叉树。</p><h3 id="313什么是完全二叉树"><a class="markdownIt-Anchor" href="#313什么是完全二叉树"></a> 3.1.3.什么是完全二叉树？</h3><p>有一种二叉树，叶子节点都在最底下两层，最后一层叶子节都靠左排列，并且除了最后一层，其他层的节点个数都要达到最大，这种二叉树叫做完全二叉树。</p><h2 id="32-完全二叉树的存储"><a class="markdownIt-Anchor" href="#32-完全二叉树的存储"></a> 3.2. 完全二叉树的存储</h2><h3 id="321-链式存储"><a class="markdownIt-Anchor" href="#321-链式存储"></a> 3.2.1. 链式存储</h3><p>每个节点由3个字段，其中一个存储数据，另外两个是指向左右子节点的指针。我们只要拎住根节点，就可以通过左右子节点的指针，把整棵树都串起来。这种存储方式比较常用，大部分二叉树代码都是通过这种方式实现的。</p><h3 id="322-顺序存储"><a class="markdownIt-Anchor" href="#322-顺序存储"></a> 3.2.2. 顺序存储</h3><p>用数组来存储，对于完全二叉树，如果节点X存储在数组中的下标为i，那么它的左子节点的存储下标为2<em>i，右子节点的下标为2</em>i+1，反过来，下标i/2位置存储的就是该节点的父节点。注意，根节点存储在下标为1的位置。完全二叉树用数组来存储时最省内存的方式。</p><h2 id="33-二叉树的遍历"><a class="markdownIt-Anchor" href="#33-二叉树的遍历"></a> 3.3. 二叉树的遍历</h2><h3 id="331-前序遍历"><a class="markdownIt-Anchor" href="#331-前序遍历"></a> 3.3.1. 前序遍历：</h3><p>对于树中的任意节点来说，先打印这个节点，然后再打印它的左子树，最后打印它的右子树。</p><h3 id="332-中序遍历"><a class="markdownIt-Anchor" href="#332-中序遍历"></a> 3.3.2. 中序遍历：</h3><p>对于树中的任意节点来说，先打印它的左子树，然后再打印它的本身，最后打印它的右子树。</p><h3 id="333-后序遍历"><a class="markdownIt-Anchor" href="#333-后序遍历"></a> 3.3.3. 后序遍历：</h3><p>对于树中的任意节点来说，先打印它的左子树，然后再打印它的右子树，最后打印它本身。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">前序遍历的递推公式：</span><br><span class="line">preOrder(r) &#x3D; print r-&gt;preOrder(r-&gt;left)-&gt;preOrder(r-&gt;right)</span><br><span class="line">中序遍历的递推公式：</span><br><span class="line">inOrder(r) &#x3D; inOrder(r-&gt;left)-&gt;print r-&gt;inOrder(r-&gt;right)</span><br><span class="line">后序遍历的递推公式：</span><br><span class="line">postOrder(r) &#x3D; postOrder(r-&gt;left)-&gt;postOrder(r-&gt;right)-&gt;print r</span><br></pre></td></tr></table></figure><p>时间复杂度：3种遍历方式中，每个节点最多会被访问2次，所以时间复杂度是O(n)。</p><h1 id="4-练习题"><a class="markdownIt-Anchor" href="#4-练习题"></a> 4. 练习题</h1><p>leetcode：94、105、106、889</p><h2 id="41-二叉树的中序遍历-leetcode题号-94"><a class="markdownIt-Anchor" href="#41-二叉树的中序遍历-leetcode题号-94"></a> 4.1 二叉树的中序遍历 : <code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">94</a></h2><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><p>递归</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> res []<span class="keyword">int</span></span><br><span class="line">    <span class="keyword">if</span> root.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">        leftRes := inorderTraversal(root.Left)</span><br><span class="line">        res = <span class="built_in">append</span>(res, leftRes...)</span><br><span class="line">    &#125;</span><br><span class="line">    res  = <span class="built_in">append</span>(res, root.Val)</span><br><span class="line">    <span class="keyword">if</span> root.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">        rightRes := inorderTraversal(root.Right)</span><br><span class="line">        res = <span class="built_in">append</span>(res, rightRes...)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迭代</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> inorderIterate(root)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorderIterate</span><span class="params">(root *TreeNode)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stack, rest := Stack([]*TreeNode&#123;root&#125;), []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(stack) &gt; <span class="number">0</span> &#123;</span><br><span class="line">cur := stack.Pop()</span><br><span class="line"><span class="keyword">if</span> cur != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> cur.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">stack.Push(cur.Right)</span><br><span class="line">&#125;</span><br><span class="line">stack.Push(cur)</span><br><span class="line">stack.Push(<span class="literal">nil</span>) <span class="comment">// 待读取标记</span></span><br><span class="line"><span class="keyword">if</span> cur.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">stack.Push(cur.Left)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">rest = <span class="built_in">append</span>(rest, stack.Pop().Val)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> rest</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Stack []*TreeNode</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Stack)</span> <span class="title">Push</span><span class="params">(node *TreeNode)</span></span> &#123;</span><br><span class="line">*s = <span class="built_in">append</span>(*s, node)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Stack)</span> <span class="title">Pop</span><span class="params">()</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">n := []*TreeNode(*s)[<span class="built_in">len</span>(*s)<span class="number">-1</span>]</span><br><span class="line">*s = []*TreeNode(*s)[:<span class="built_in">len</span>(*s)<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="42-从前序与中序遍历序列构造二叉树-leetcode题号-105"><a class="markdownIt-Anchor" href="#42-从前序与中序遍历序列构造二叉树-leetcode题号-105"></a> 4.2 从前序与中序遍历序列构造二叉树 : <code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105</a></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">buildTree</span><span class="params">(preorder []<span class="keyword">int</span>, inorder []<span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(preorder) == <span class="number">0</span> || <span class="built_in">len</span>(inorder) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中顺序列找根结点</span></span><br><span class="line">    <span class="keyword">var</span> root <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">for</span> k, v :=  <span class="keyword">range</span> inorder &#123;</span><br><span class="line">        <span class="keyword">if</span> v == preorder[<span class="number">0</span>] &#123;</span><br><span class="line">            root = k</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 左右子树归类</span></span><br><span class="line">    <span class="comment">// pre_left, pre_right := preorder[1: root+1], preorder[root+1:]</span></span><br><span class="line">    <span class="comment">// in_left, in_right := inorder[0: root], inorder[root+1:]</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 左右子树递归</span></span><br><span class="line">    <span class="keyword">return</span> &amp;TreeNode&#123;</span><br><span class="line">        Val:   preorder[<span class="number">0</span>],</span><br><span class="line">        Left:  buildTree(preorder[<span class="number">1</span>: root+<span class="number">1</span>], inorder[<span class="number">0</span>: root]),</span><br><span class="line">        Right: buildTree(preorder[root+<span class="number">1</span>:], inorder[root+<span class="number">1</span>:]),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="43-从中序与后序遍历序列构造二叉树-leetcode题号-106"><a class="markdownIt-Anchor" href="#43-从中序与后序遍历序列构造二叉树-leetcode题号-106"></a> 4.3 从中序与后序遍历序列构造二叉树 : <code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">106</a></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">buildTree</span><span class="params">(inorder []<span class="keyword">int</span>, postorder []<span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(inorder) == <span class="number">0</span> || <span class="built_in">len</span>(postorder) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> root <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> inorder &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == postorder[<span class="built_in">len</span>(postorder) - <span class="number">1</span>]) &#123;</span><br><span class="line">            root = k</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;TreeNode &#123;</span><br><span class="line">        Val : inorder[root],</span><br><span class="line">        Left : buildTree(inorder[<span class="number">0</span> : root], postorder[<span class="number">0</span>: root]),</span><br><span class="line">        Right : buildTree(inorder[root +<span class="number">1</span> :], postorder[root : <span class="built_in">len</span>(postorder) - <span class="number">1</span>]),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="43-根据前序和后序遍历构造二叉树-leetcode题号-889"><a class="markdownIt-Anchor" href="#43-根据前序和后序遍历构造二叉树-leetcode题号-889"></a> 4.3 根据前序和后序遍历构造二叉树 : <code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/">889</a></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">constructFromPrePost</span><span class="params">(pre []<span class="keyword">int</span>, post []<span class="keyword">int</span>)</span> *<span class="title">TreeNode</span></span> &#123;</span><br><span class="line">node:=&amp;TreeNode&#123;Val: pre[<span class="number">0</span>]&#125;</span><br><span class="line">    <span class="comment">//长度至少要大于1才能构建子树</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(pre)&gt;<span class="number">1</span>&#123;</span><br><span class="line">i:=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i&lt;<span class="built_in">len</span>(post)&#123;</span><br><span class="line"><span class="keyword">if</span> post[i]==pre[<span class="number">1</span>]&#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//长度大于1，因此按照自定义的规则来说，必然可以构建左子树</span></span><br><span class="line">node.Left=constructFromPrePost(pre[<span class="number">1</span>:i+<span class="number">2</span>],post[<span class="number">0</span>:i+<span class="number">1</span>])</span><br><span class="line"><span class="comment">//可能存在右子树，那么构建右子树</span></span><br><span class="line"><span class="keyword">if</span> i+<span class="number">2</span>&lt;<span class="built_in">len</span>(pre)&#123;</span><br><span class="line">node.Right=constructFromPrePost(pre[i+<span class="number">2</span>:],post[i+<span class="number">1</span>:<span class="built_in">len</span>(post)<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找</title>
      <link href="/2020/08/09/Data%20Structure%20and%20Algorithm/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/2020/08/09/Data%20Structure%20and%20Algorithm/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="1-普通二分查找的非递归与递归实现"><a class="markdownIt-Anchor" href="#1-普通二分查找的非递归与递归实现"></a> 1 普通二分查找的非递归与递归实现</h1><p>条件：无重复元素的有序数组</p><h4 id="11-非递归"><a class="markdownIt-Anchor" href="#11-非递归"></a> 1.1 非递归</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BinarySearch</span><span class="params">(arr []<span class="keyword">int</span>, v <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line">low := <span class="number">0</span></span><br><span class="line">hight := n - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> low &lt;= hight &#123;</span><br><span class="line">mid := low + ((hight - low) &gt;&gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> arr[mid] == v &#123;</span><br><span class="line"><span class="keyword">return</span> mid</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> arr[mid] &gt; v &#123;</span><br><span class="line">hight = mid - <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">low = mid + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12-递归"><a class="markdownIt-Anchor" href="#12-递归"></a> 1.2 递归</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BinarySearchRecursive</span><span class="params">(arr []<span class="keyword">int</span>, v <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> bs()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bs</span><span class="params">(arr []<span class="keyword">int</span>, v <span class="keyword">int</span>, low, hight <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> low &gt; hight &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mid := low + ((hight - low) &gt;&gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> a[mid] == v &#123;</span><br><span class="line"><span class="keyword">return</span> mid</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> a[mid] &gt; v &#123;</span><br><span class="line"><span class="keyword">return</span> bs(arr, v, low, mid<span class="number">-1</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> bs(arr, v, mid+<span class="number">1</span>, hight)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-4种常见的二分查找变形问题"><a class="markdownIt-Anchor" href="#2-4种常见的二分查找变形问题"></a> 2. 4种常见的二分查找变形问题</h1><p>条件：有重复元素的有序数组</p><h2 id="21-查找第一个值等于给定值的元素"><a class="markdownIt-Anchor" href="#21-查找第一个值等于给定值的元素"></a> 2.1 查找第一个值等于给定值的元素</h2><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BinarySearchFirst</span><span class="params">(arr []<span class="keyword">int</span>, v <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>[arr]</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">low := <span class="number">0</span></span><br><span class="line">hight := n <span class="number">-1</span> </span><br><span class="line"><span class="keyword">for</span> low &lt;= hight &#123;</span><br><span class="line">mid := low + ((hight - low)&gt;&gt;<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> arr[mid] &gt; v &#123;</span><br><span class="line">hight = mid<span class="number">-1</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> arr[mid] &lt; v&#123;</span><br><span class="line">low = mid + <span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span> mid == <span class="number">0</span> || arr[mid - <span class="number">1</span>] != v &#123;</span><br><span class="line"><span class="keyword">return</span> mid</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">hight = mid <span class="number">-1</span> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span> </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="22-查找最后一个值等于给定值的元素"><a class="markdownIt-Anchor" href="#22-查找最后一个值等于给定值的元素"></a> 2.2 查找最后一个值等于给定值的元素</h2><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BinarySearchLast</span><span class="params">(arr []<span class="keyword">int</span>, v <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>[arr]</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">low := <span class="number">0</span></span><br><span class="line">hight := n <span class="number">-1</span> </span><br><span class="line"><span class="keyword">for</span> low &lt;= hight &#123;</span><br><span class="line">mid := low + ((hight - low)&gt;&gt;<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> arr[mid] &gt; v &#123;</span><br><span class="line">hight = mid<span class="number">-1</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> arr[mid] &lt; v&#123;</span><br><span class="line">low = mid + <span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span> mid == n<span class="number">-1</span> || arr[mid + <span class="number">1</span>] != v &#123;</span><br><span class="line"><span class="keyword">return</span> mid</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">low = mid + <span class="number">1</span> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="23-查找第一个大于等于给定值的元素"><a class="markdownIt-Anchor" href="#23-查找第一个大于等于给定值的元素"></a> 2.3 查找第一个大于等于给定值的元素</h2><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BinarySearchFirstGT</span><span class="params">(arr []<span class="keyword">int</span>, v <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>[arr]</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">low := <span class="number">0</span></span><br><span class="line">hight := n <span class="number">-1</span> </span><br><span class="line"><span class="keyword">for</span> low &lt;= hight &#123;</span><br><span class="line">mid := low + ((hight - low)&gt;&gt;<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> arr[mid] &gt;= value &#123;</span><br><span class="line"><span class="keyword">if</span> (mid ==<span class="number">0</span>) || a[mid - <span class="number">1</span>]&lt; v &#123;</span><br><span class="line"><span class="keyword">return</span> mid</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">hight = mid <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">low = mid + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span> </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="24-查找最后一个小于等于给定值的元素"><a class="markdownIt-Anchor" href="#24-查找最后一个小于等于给定值的元素"></a> 2.4 查找最后一个小于等于给定值的元素</h2><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BinarySearchLastLT</span><span class="params">(arr []<span class="keyword">int</span>, v <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>[arr]</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">low := <span class="number">0</span></span><br><span class="line">hight := n - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> low &lt;= hight &#123;</span><br><span class="line">mid := low + ((hight - low) &gt;&gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> arr[mid] &lt;= value &#123;</span><br><span class="line"><span class="keyword">if</span> (mid == n<span class="number">-1</span>) || a[mid+<span class="number">1</span>] &gt; v &#123;</span><br><span class="line"><span class="keyword">return</span> mid</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">low = mid + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">hight = mid - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="练习题"><a class="markdownIt-Anchor" href="#练习题"></a> 练习题</h1><p>1.搜索旋转排序数组 : <code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/">33</a></p><h3 id="思路一"><a class="markdownIt-Anchor" href="#思路一"></a> 思路一：</h3><ol><li>先二分法找到 数组旋转分界点</li><li>判断 目标点在分界点的左侧还是右侧，传入对应的二分查找方法中去</li></ol><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">low := <span class="number">0</span></span><br><span class="line">hight := n - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nums[low] &gt; target &amp;&amp; nums[hight] &lt; target &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flag <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> low &lt;= hight &#123;</span><br><span class="line">mid := low + ((hight - low) &gt;&gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> nums[mid] &gt; nums[low] &#123;</span><br><span class="line">low = mid</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &lt; nums[low] &#123;</span><br><span class="line">hight = mid</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> nums[mid] &gt;= nums[hight] &#123;</span><br><span class="line">flag = mid</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">flag = hight</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nums[<span class="number">0</span>] &lt;= target &#123;</span><br><span class="line"><span class="keyword">return</span> sort(nums, <span class="number">0</span>, flag, target)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sort(nums, flag+<span class="number">1</span>, n<span class="number">-1</span>, target)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sort</span><span class="params">(arr []<span class="keyword">int</span>, start, end, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"></span><br><span class="line">low := start</span><br><span class="line">hight := end</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> low &lt;= hight &#123;</span><br><span class="line">mid := low + ((hight - low) &gt;&gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> arr[mid] == target &#123;</span><br><span class="line"><span class="keyword">return</span> mid</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> arr[mid] &lt; target &#123;</span><br><span class="line">low = mid + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">hight = mid - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路二"><a class="markdownIt-Anchor" href="#思路二"></a> 思路二</h3><p>我们可以在常规二分搜索的时候查看当前 mid 为分割位置分割出来的两个部分 [l, mid] 和 [mid + 1, r] 哪个部分是有序的，并根据有序的那个部分确定我们该如何改变二分搜索的上下界，因为我们能够根据有序的那部分判断出 target 在不在这个部分</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    low := <span class="number">0</span></span><br><span class="line">    hight := n <span class="number">-1</span> </span><br><span class="line">    <span class="keyword">for</span> low &lt;= hight &#123;</span><br><span class="line">        mid := low +((hight -low) &gt;&gt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">            <span class="keyword">return</span> mid </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> nums[low] &lt;= nums[mid] &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[low] &lt;= target &amp;&amp; nums[mid] &gt; target &#123;</span><br><span class="line">                hight = mid <span class="number">-1</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> nums[mid] &lt; target &amp;&amp; nums[hight] &gt;= target &#123;</span><br><span class="line">                low = mid +<span class="number">1</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                hight = mid <span class="number">-1</span> </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="/2020/08/06/Data%20Structure%20and%20Algorithm/%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/08/06/Data%20Structure%20and%20Algorithm/%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-几种经典排序算法及其时间复杂度级别"><a class="markdownIt-Anchor" href="#1-几种经典排序算法及其时间复杂度级别"></a> 1. 几种经典排序算法及其时间复杂度级别</h1><ul><li>冒泡、插入、选择 O(n^2) 基于比较</li><li>快排、归并 O(nlogn) 基于比较</li><li>计数、基数、桶 O(n) 不基于比较</li></ul><h1 id="2-如何分析一个排序算法"><a class="markdownIt-Anchor" href="#2-如何分析一个排序算法"></a> 2. 如何分析一个排序算法？</h1><ol><li>学习排序算法的思路？明确原理、掌握实现以及分析性能。</li><li>如何分析排序算法性能？从执行效率、内存消耗以及稳定性3个方面分析排序算法的性能。</li><li>执行效率：从以下3个方面来衡量<br />1）最好情况、最坏情况、平均情况时间复杂度<br />2）时间复杂度的系数、常数、低阶：排序的数据量比较小时考虑<br />3）比较次数和交换（或移动）次数</li><li>内存消耗：通过空间复杂度来衡量。针对排序算法的空间复杂度，引入原地排序的概念，原地排序算法就是指空间复杂度为O(1)的排序算法。</li><li>稳定性：如果待排序的序列中存在值等的元素，经过排序之后，相等元素之间原有的先后顺序不变，就说明这个排序算法时稳定的。</li></ol><h1 id="3-冒泡排序"><a class="markdownIt-Anchor" href="#3-冒泡排序"></a> 3. 冒泡排序</h1><h2 id="31-排序原理"><a class="markdownIt-Anchor" href="#31-排序原理"></a> 3.1. 排序原理</h2><ol><li>冒泡排序只会操作相邻的两个数据。</li><li>对相邻两个数据进行比较，看是否满足大小关系要求，若不满足让它俩互换。</li><li>一次冒泡会让至少一个元素移动到它应该在的位置，重复n次，就完成了n个数据的排序工作。</li><li>优化：若某次冒泡不存在数据交换，则说明已经达到完全有序，所以终止冒泡。</li></ol><h2 id="32-代码实现"><a class="markdownIt-Anchor" href="#32-代码实现"></a> 3.2. 代码实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bubbleSort</span> <span class="params">([]<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n &lt;=<span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i &lt; n; i++ &#123; </span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; n-i<span class="number">-1</span>; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> a[j] &gt; a[j+<span class="number">1</span>] &#123;</span><br><span class="line">                temp := a[j]</span><br><span class="line">                a[i] = a[j+]</span><br><span class="line">                a[j+<span class="number">1</span>] = temp</span><br><span class="line">                flag = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> !flag &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="33-性能分析"><a class="markdownIt-Anchor" href="#33-性能分析"></a> 3.3. 性能分析</h2><h3 id="331-执行效率最小时间复杂度-最大时间复杂度-平均时间复杂度"><a class="markdownIt-Anchor" href="#331-执行效率最小时间复杂度-最大时间复杂度-平均时间复杂度"></a> 3.3.1 执行效率：最小时间复杂度、最大时间复杂度、平均时间复杂度</h3><ul><li>最小时间复杂度：数据完全有序时，只需进行一次冒泡操作即可，时间复杂度是O(n)。</li><li>最大时间复杂度：数据倒序排序时，需要n次冒泡操作，时间复杂度是O(n^2)。</li><li>平均时间复杂度：通过有序度和逆序度来分析。</li></ul><p>什么是有序度？<br />有序度是数组中具有有序关系的元素对的个数，比如[2,4,3,1,5,6]这组数据的有序度就是11，分别是[2,4][2,3][2,5][2,6][4,5][4,6][3,5][3,6][1,5][1,6][5,6]。同理，对于一个倒序数组，比如[6,5,4,3,2,1]，有序度是0；对于一个完全有序的数组，比如[1,2,3,4,5,6]，有序度为n*(n-1)/2，也就是15，完全有序的情况称为满有序度。<br />什么是逆序度？逆序度的定义正好和有序度相反。核心公式：逆序度=满有序度-有序度。<br />排序过程，就是有序度增加，逆序度减少的过程，最后达到满有序度，就说明排序完成了。<br />冒泡排序包含两个操作原子，即比较和交换，每交换一次，有序度加1。不管算法如何改进，交换的次数总是确定的，即逆序度。<br />对于包含n个数据的数组进行冒泡排序，平均交换次数是多少呢？最坏的情况初始有序度为0，所以要进行n*(n-1)/2交换。最好情况下，初始状态有序度是n*(n-1)/2，就不需要进行交互。我们可以取个中间值n*(n-1)/4，来表示初始有序度既不是很高也不是很低的平均情况。<br />换句话说，平均情况下，需要n*(n-1)/4次交换操作，比较操作可定比交换操作多，而复杂度的上限是O(n<sup>2)，所以平均情况时间复杂度就是O(n</sup>2)。<br />以上的分析并不严格，但很实用，这就够了。</p><h3 id="332-空间复杂度每次交换仅需1个临时变量故空间复杂度为o1是原地排序算法"><a class="markdownIt-Anchor" href="#332-空间复杂度每次交换仅需1个临时变量故空间复杂度为o1是原地排序算法"></a> 3.3.2 空间复杂度：每次交换仅需1个临时变量，故空间复杂度为O(1)，是原地排序算法。</h3><h3 id="333-算法稳定性如果两个值相等就不会交换位置故是稳定排序算法"><a class="markdownIt-Anchor" href="#333-算法稳定性如果两个值相等就不会交换位置故是稳定排序算法"></a> 3.3.3 算法稳定性：如果两个值相等，就不会交换位置，故是稳定排序算法。</h3><h1 id="4-插入排序"><a class="markdownIt-Anchor" href="#4-插入排序"></a> 4. 插入排序</h1><h2 id="41-算法原理"><a class="markdownIt-Anchor" href="#41-算法原理"></a> 4.1. 算法原理</h2><p>首先，我们将数组中的数据分为2个区间，即已排序区间和未排序区间。初始已排序区间只有一个元素，就是数组的第一个元素。插入算法的核心思想就是取未排序区间中的元素，在已排序区间中找到合适的插入位置将其插入，并保证已排序区间中的元素一直有序。重复这个过程，直到未排序中元素为空，算法结束。</p><h2 id="42代码实现"><a class="markdownIt-Anchor" href="#42代码实现"></a> 4.2代码实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertionSort</span> <span class="params">([]<span class="keyword">int</span> a, n <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> i:= <span class="number">1</span>; i &lt; n; i++ &#123;</span><br><span class="line">        value := a[i]</span><br><span class="line">        j:=i<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> ; j&gt;<span class="number">0</span>; j--&#123;</span><br><span class="line">            <span class="keyword">if</span> a[j]&gt;a[i] &#123;</span><br><span class="line">                a[j+<span class="number">1</span>]= a[j]</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a[j+<span class="number">1</span>] = a[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="43-性能分析"><a class="markdownIt-Anchor" href="#43-性能分析"></a> 4.3 性能分析</h2><h3 id="431-时间复杂度最好-最坏-平均情况"><a class="markdownIt-Anchor" href="#431-时间复杂度最好-最坏-平均情况"></a> 4.3.1 时间复杂度：最好、最坏、平均情况</h3><p>如果要排序的数组已经是有序的，我们并不需要搬移任何数据。只需要遍历一遍数组即可，所以时间复杂度是O(n)。如果数组是倒序的，每次插入都相当于在数组的第一个位置插入新的数据，所以需要移动大量的数据，因此时间复杂度是O(n<sup>2)。而在一个数组中插入一个元素的平均时间复杂都是O(n)，插入排序需要n次插入，所以平均时间复杂度是O(n</sup>2)。</p><h3 id="432-空间复杂度从上面的代码可以看出插入排序算法的运行并不需要额外的存储空间所以空间复杂度是o1是原地排序算法"><a class="markdownIt-Anchor" href="#432-空间复杂度从上面的代码可以看出插入排序算法的运行并不需要额外的存储空间所以空间复杂度是o1是原地排序算法"></a> 4.3.2 空间复杂度：从上面的代码可以看出，插入排序算法的运行并不需要额外的存储空间，所以空间复杂度是O(1)，是原地排序算法。</h3><h3 id="433-算法稳定性在插入排序中对于值相同的元素我们可以选择将后面出现的元素插入到前面出现的元素的后面这样就保持原有的顺序不变所以是稳定的"><a class="markdownIt-Anchor" href="#433-算法稳定性在插入排序中对于值相同的元素我们可以选择将后面出现的元素插入到前面出现的元素的后面这样就保持原有的顺序不变所以是稳定的"></a> 4.3.3 算法稳定性：在插入排序中，对于值相同的元素，我们可以选择将后面出现的元素，插入到前面出现的元素的后面，这样就保持原有的顺序不变，所以是稳定的。</h3><h1 id="5-归并排序"><a class="markdownIt-Anchor" href="#5-归并排序"></a> 5 归并排序</h1><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MergeSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">arrLen := <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="keyword">if</span> arrLen &lt;= <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mergeSort(arr, <span class="number">0</span>, arrLen<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeSort</span><span class="params">(arr []<span class="keyword">int</span>, start, end <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> start &gt;= end &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mid := (start + end) / <span class="number">2</span></span><br><span class="line">mergeSort(arr, start, mid)</span><br><span class="line">mergeSort(arr, mid+<span class="number">1</span>, end)</span><br><span class="line">merge(arr, start, mid, end)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(arr []<span class="keyword">int</span>, start, mid, end <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">tmpArr := <span class="built_in">make</span>([]<span class="keyword">int</span>, end-start+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">i := start</span><br><span class="line">j := mid + <span class="number">1</span></span><br><span class="line">k := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ; i &lt;= mid &amp;&amp; j &lt;= end; k++ &#123;</span><br><span class="line"><span class="keyword">if</span> arr[i] &lt;= arr[j] &#123;</span><br><span class="line">tmpArr[k] = arr[i]</span><br><span class="line">i++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tmpArr[k] = arr[j]</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ; i &lt;= mid; i++ &#123;</span><br><span class="line">tmpArr[k] = arr[i]</span><br><span class="line">k++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ; j &lt;= end; j++ &#123;</span><br><span class="line">tmpArr[k] = arr[j]</span><br><span class="line">k++</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">copy</span>(arr[start:end+<span class="number">1</span>], tmpArr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-快速排序"><a class="markdownIt-Anchor" href="#6-快速排序"></a> 6 快速排序</h1><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// QuickSort is quicksort methods for golang</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuickSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">separateSort(arr, <span class="number">0</span>, <span class="built_in">len</span>(arr)<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">separateSort</span><span class="params">(arr []<span class="keyword">int</span>, start, end <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> start &gt;= end &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">i := partition(arr, start, end)</span><br><span class="line">separateSort(arr, start, i<span class="number">-1</span>)</span><br><span class="line">separateSort(arr, i+<span class="number">1</span>, end)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">partition</span><span class="params">(arr []<span class="keyword">int</span>, start, end <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 选取最后一位当对比数字</span></span><br><span class="line">pivot := arr[end]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = start</span><br><span class="line"><span class="keyword">for</span> j := start; j &lt; end; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> arr[j] &lt; pivot &#123;</span><br><span class="line"><span class="keyword">if</span> !(i == j) &#123;</span><br><span class="line"><span class="comment">// 交换位置</span></span><br><span class="line">arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line">&#125;</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr[i], arr[end] = arr[end], arr[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="桶排序"><a class="markdownIt-Anchor" href="#桶排序"></a> 桶排序</h1><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 获取待排序数组中的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getMax</span><span class="params">(a []<span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line">max := a[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">1</span>; i&lt;<span class="built_in">len</span>(a); i++&#123;</span><br><span class="line"><span class="keyword">if</span> a[i] &gt; max&#123;</span><br><span class="line">max = a[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BucketSort</span><span class="params">(a []<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">num := <span class="built_in">len</span>(a)</span><br><span class="line"><span class="keyword">if</span> num &lt;= <span class="number">1</span>&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">max := getMax(a)</span><br><span class="line">buckets := <span class="built_in">make</span>([][]<span class="keyword">int</span>, num)  <span class="comment">// 二维切片</span></span><br><span class="line"></span><br><span class="line">index :=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt; num; i++&#123;</span><br><span class="line">index = a[i]*(num <span class="number">-1</span>) / max  <span class="comment">// 桶序号</span></span><br><span class="line">buckets[index] = <span class="built_in">append</span>(buckets[index],a[i]) <span class="comment">// 加入对应的桶中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tmpPos := <span class="number">0</span>  <span class="comment">// 标记数组位置</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; num; i++ &#123;</span><br><span class="line">bucketLen := <span class="built_in">len</span>(buckets[i])</span><br><span class="line"><span class="keyword">if</span> bucketLen &gt; <span class="number">0</span>&#123;</span><br><span class="line">Sort.QuickSort(buckets[i])  <span class="comment">// 桶内做快速排序</span></span><br><span class="line"><span class="built_in">copy</span>(a[tmpPos:], buckets[i])</span><br><span class="line">tmpPos += bucketLen</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 桶排序简单实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BucketSortSimple</span><span class="params">(source []<span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(source)&lt;=<span class="number">1</span>&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">array := <span class="built_in">make</span>([]<span class="keyword">int</span>, getMax(source)+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(source); i++&#123;</span><br><span class="line">array[source[i]] ++</span><br><span class="line">&#125;</span><br><span class="line">    fmt.Println(array)</span><br><span class="line">c := <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(array); i++&#123;</span><br><span class="line"><span class="keyword">for</span> array[i] != <span class="number">0</span> &#123;</span><br><span class="line">            c = <span class="built_in">append</span>(c, i)</span><br><span class="line">array[i] --</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">copy</span>(source,c)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归</title>
      <link href="/2020/08/04/Data%20Structure%20and%20Algorithm/%E9%80%92%E5%BD%92/"/>
      <url>/2020/08/04/Data%20Structure%20and%20Algorithm/%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<p>#1. 什么是递归？</p><ol><li>递归是一种非常高效、简洁的编码技巧，一种应用非常广泛的算法，比如DFS深度优先搜索、前中后序二叉树遍历等都是使用递归。</li><li>方法或函数调用自身的方式称为递归调用，调用称为递，返回称为归。</li><li>基本上，所有的递归问题都可以用递推公式来表示，比如<br />f(n) = f(n-1) + 1;<br />f(n) = f(n-1) + f(n-2);<br />f(n)=n*f(n-1);</li></ol><p>#2. 为什么使用递归？递归的优缺点？</p><ol><li>优点：代码的表达力很强，写起来简洁。</li><li>缺点：空间复杂度高、有堆栈溢出风险、存在重复计算、过多的函数调用会耗时较多等问题。</li></ol><p>#3. 什么样的问题可以用递归解决呢？</p><p>一个问题只要同时满足以下3个条件，就可以用递归来解决：</p><ol><li>问题的解可以分解为几个子问题的解。何为子问题？就是数据规模更小的问题。</li><li>问题与子问题，除了数据规模不同，求解思路完全一样</li><li>存在递归终止条件</li></ol><p>#4. 如何实现递归？</p><ol><li>递归代码编写<br />写递归代码的关键就是找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后再推敲终止条件，最后将递推公式和终止条件翻译成代码。</li><li>递归代码理解<br />对于递归代码，若试图想清楚整个递和归的过程，实际上是进入了一个思维误区。<br />那该如何理解递归代码呢？如果一个问题A可以分解为若干个子问题B、C、D，你可以假设子问题B、C、D已经解决。而且，你只需要思考问题A与子问题B、C、D两层之间的关系即可，不需要一层层往下思考子问题与子子问题，子子问题与子子子问题之间的关系。屏蔽掉递归细节，这样子理解起来就简单多了。<br />因此，理解递归代码，就把它抽象成一个递推公式，不用想一层层的调用关系，不要试图用人脑去分解递归的每个步骤。</li></ol><p>#5. 递归常见问题及解决方案</p><p>1.警惕堆栈溢出：可以声明一个全局变量来控制递归的深度，从而避免堆栈溢出。<br />2.警惕重复计算：通过某种数据结构来保存已经求解过的值，从而避免重复计算。</p><p>#6. 如何将递归改写为非递归代码？</p><p>笼统的讲，所有的递归代码都可以改写为迭代循环的非递归写法。如何做？抽象出递推公式、初始值和边界条件，然后用迭代循环实现。</p><p>#7. 练习题<br />##1. 斐波那契数列: <code>剑指 Offer 10</code>题号: <a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/">剑指 Offer 10</a></p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span> ||n==<span class="number">1</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    &#125;</span><br><span class="line">    dp:=<span class="built_in">make</span>([]<span class="keyword">int</span>,n+<span class="number">1</span>)</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">0</span></span><br><span class="line">    dp[<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">2</span>;i&lt;=n;i++&#123;</span><br><span class="line">        dp[i]=(dp[i<span class="number">-1</span>]+dp[i<span class="number">-2</span>])%<span class="number">1000000007</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##2. 汉诺塔问题: <code>面试题 08.06.</code>题号: <a href="https://leetcode-cn.com/problems/hanota-lcci/">面试题 08.06. </a></p><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>递归重点：1）必须可以拆分为若干个规模较小，与原问题形式相同的子问题；并且子问题可以用完全相同的解题思路解决；（递归主体）<br />2）递归的演化过程是一个对原问题从大到小进行拆解的过程，并且会有一个明确的终点。（终止条件）<br />假设共n个盘子，三个柱子分别是x,y,z，则目的是将x柱上面的n个盘子转移到z柱上面，那么分析：<br />1.将n-1个盘子从x柱转移到y柱<br />2.将x柱上最后一个盘子转移到z柱<br />3.将n-1个盘子从y柱转移到z柱<br />可见，1，3是汉诺塔问题；终止条件，当n=1时无法再细化。<br />所以判断可以使用递归解决该问题。</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hanota</span><span class="params">(A []<span class="keyword">int</span>, B []<span class="keyword">int</span>, C []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(A)</span><br><span class="line">hanio(n, &amp;A, &amp;B, &amp;C)</span><br><span class="line"><span class="keyword">return</span> C</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hanio</span><span class="params">(n <span class="keyword">int</span>, a *[]<span class="keyword">int</span>, b *[]<span class="keyword">int</span>, c *[]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">1</span> || n &gt; <span class="number">14</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">*c = <span class="built_in">append</span>(*c, (*a)[<span class="built_in">len</span>(*a)<span class="number">-1</span>])</span><br><span class="line">*a = (*a)[:<span class="built_in">len</span>(*a)<span class="number">-1</span>]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">hanio(n<span class="number">-1</span>, a, c, b)</span><br><span class="line">*c = <span class="built_in">append</span>(*c, (*a)[<span class="built_in">len</span>(*a)<span class="number">-1</span>])</span><br><span class="line">*a = (*a)[:<span class="built_in">len</span>(*a)<span class="number">-1</span>]</span><br><span class="line">hanio(n<span class="number">-1</span>, b, a, c)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列</title>
      <link href="/2020/08/03/Data%20Structure%20and%20Algorithm/%E9%98%9F%E5%88%97/"/>
      <url>/2020/08/03/Data%20Structure%20and%20Algorithm/%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是队列"><a class="markdownIt-Anchor" href="#1-什么是队列"></a> 1. 什么是队列？</h1><ol><li>先进者先出，这就是典型的“队列”结构。</li><li>支持两个操作：入队enqueue()，放一个数据到队尾；出队dequeue()，从队头取一个元素。</li><li>所以，和栈一样，队列也是一种操作受限的线性表。</li></ol><h1 id="2-如何实现队列"><a class="markdownIt-Anchor" href="#2-如何实现队列"></a> 2. 如何实现队列？</h1><ol><li>队列API<br />public interface Queue<T> {<br />public void enqueue(T item); //入队<br />public T dequeue(); //出队<br />public int size(); //统计元素数量<br />public boolean isNull(); //是否为空<br />}</li><li>数组实现（顺序队列）：</li><li>链表实现（链式队列）：</li><li>循环队列（基于数组）：</li></ol><h1 id="3-队列有哪些常见的应用"><a class="markdownIt-Anchor" href="#3-队列有哪些常见的应用"></a> 3. 队列有哪些常见的应用？</h1><ol><li>阻塞队列<br />1)在队列的基础上增加阻塞操作，就成了阻塞队列。<br />2）阻塞队列就是在队列为空的时候，从队头取数据会被阻塞，因为此时还没有数据可取，直到队列中有了数据才能返回；如果队列已经满了，那么插入数据的操作就会被阻塞，直到队列中有空闲位置后再插入数据，然后在返回。<br />3）从上面的定义可以看出这就是一个“生产者-消费者模型”。这种基于阻塞队列实现的“生产者-消费者模型”可以有效地协调生产和消费的速度。当“生产者”生产数据的速度过快，“消费者”来不及消费时，存储数据的队列很快就会满了，这时生产者就阻塞等待，直到“消费者”消费了数据，“生产者”才会被唤醒继续生产。不仅如此，基于阻塞队列，我们还可以通过协调“生产者”和“消费者”的个数，来提高数据处理效率，比如配置几个消费者，来应对一个生产者。</li><li>并发队列<br />1）在多线程的情况下，会有多个线程同时操作队列，这时就会存在线程安全问题。能够有效解决线程安全问题的队列就称为并发队列。<br />2）并发队列简单的实现就是在enqueue()、dequeue()方法上加锁，但是锁粒度大并发度会比较低，同一时刻仅允许一个存或取操作。<br />3）实际上，基于数组的循环队列利用CAS原子操作，可以实现非常高效的并发队列。这也是循环队列比链式队列应用更加广泛的原因。</li><li>线程池资源枯竭是的处理<br />在资源有限的场景，当没有空闲资源时，基本上都可以通过“队列”这种数据结构来实现请求排队。</li></ol><h1 id="4-思考"><a class="markdownIt-Anchor" href="#4-思考"></a> 4. 思考</h1><p>1.除了线程池这种池结构会用到队列排队请求，还有哪些类似线程池结构或者场景中会用到队列的排队请求呢？<br />2.今天讲到并发队列，关于如何实现无锁的并发队列，网上有很多讨论。对这个问题，你怎么看？</p><h1 id="5-练习题"><a class="markdownIt-Anchor" href="#5-练习题"></a> 5. 练习题</h1><p>1.滑动窗口的最大值: <code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/number-of-recent-calls/">剑指 Offer 59</a></p><h2 id="1滑动窗口的最大值"><a class="markdownIt-Anchor" href="#1滑动窗口的最大值"></a> 1.滑动窗口的最大值</h2><p><code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/">剑指 Offer 59</a></p><h3 id="思路一"><a class="markdownIt-Anchor" href="#思路一"></a> 思路一</h3><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSlidingWindow</span><span class="params">(nums []<span class="keyword">int</span>, k <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    ret := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">    queue := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, k)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> k &lt;= <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line"><span class="comment">// 窗口已经移动到第i个位置， 而queue[0]保存的值已经是窗口之外的索引，因此有queue[0] &lt;= i - k; </span></span><br><span class="line">        <span class="comment">// i &gt;= k 代表，窗口的移动已经超过初始的k个大小。这样才有queue = queue[1:]的意义</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= k &amp;&amp; queue[<span class="number">0</span>] &lt;= i - k &#123;</span><br><span class="line">            queue = queue[<span class="number">1</span>:]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 校验新进来的v和queue内保存的值比较，如果有小于v的，那么淘汰掉。目的是为了当窗口不断移动时，始终保持窗口内有最大值，</span></span><br><span class="line">        <span class="comment">// 并且是顺序排列的。 也就是优先队列。 golang的slice可以作为双向队列，左右两边都可以pop</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span> &amp;&amp; nums[queue[<span class="built_in">len</span>(queue)<span class="number">-1</span>]] &lt;= v &#123;</span><br><span class="line">            queue = queue[:(<span class="built_in">len</span>(queue)<span class="number">-1</span>)]</span><br><span class="line">        &#125;</span><br><span class="line">        queue = <span class="built_in">append</span>(queue, i)</span><br><span class="line">        <span class="keyword">if</span> i &gt;= k - <span class="number">1</span> &#123;</span><br><span class="line">            ret = <span class="built_in">append</span>(ret, nums[queue[<span class="number">0</span>]])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈</title>
      <link href="/2020/08/02/Data%20Structure%20and%20Algorithm/%E6%A0%88/"/>
      <url>/2020/08/02/Data%20Structure%20and%20Algorithm/%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是栈"><a class="markdownIt-Anchor" href="#1-什么是栈"></a> 1. 什么是栈？</h1><p>后进者先出，先进者后出，这就是典型的“栈”结构。从栈的操作特性来看，是一种“操作受限”的线性表，只允许在端插入和删除数据。</p><h1 id="2-为什么需要栈"><a class="markdownIt-Anchor" href="#2-为什么需要栈"></a> 2. 为什么需要栈？</h1><ol><li>栈是一种操作受限的数据结构，其操作特性用数组和链表均可实现。</li><li>任何数据结构都是对特定应用场景的抽象，数组和链表虽然使用起来更加灵活，但却暴露了几乎所有的操作，难免会引发错误操作的风险。</li><li>所以，当某个数据集合只涉及在某端插入和删除数据，且满足后进者先出，先进者后出的操作特性时，我们应该首选栈这种数据结构。</li></ol><h1 id="3如何实现栈"><a class="markdownIt-Anchor" href="#3如何实现栈"></a> 3.如何实现栈？</h1><h2 id="31-栈的api"><a class="markdownIt-Anchor" href="#31-栈的api"></a> 3.1 栈的API</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stack</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Item <span class="keyword">interface</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ItemStack the stack of items</span></span><br><span class="line"><span class="keyword">type</span> ItemStack <span class="keyword">struct</span> &#123;</span><br><span class="line">    items []Item</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// New Create a new ItemStack</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ItemStack)</span> <span class="title">New</span><span class="params">()</span> *<span class="title">ItemStack</span></span> &#123;</span><br><span class="line">    s.items = []Item&#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Push adds an Item to the top of the stack</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ItemStack)</span> <span class="title">Push</span><span class="params">(t Item)</span></span> &#123;</span><br><span class="line">    s.items = <span class="built_in">append</span>(s.items, t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pop removes an Item from the top of the stack</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ItemStack)</span> <span class="title">Pop</span><span class="params">()</span> *<span class="title">Item</span></span> &#123;</span><br><span class="line">    item := s.items[<span class="built_in">len</span>(s.items)<span class="number">-1</span>] <span class="comment">// 后进先出</span></span><br><span class="line">    s.items = s.items[<span class="number">0</span>:<span class="built_in">len</span>(s.items)<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> &amp;item</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// size of stack</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ItemStack)</span> <span class="title">size</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(s.items)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="32-数组实现自动扩容"><a class="markdownIt-Anchor" href="#32-数组实现自动扩容"></a> 3.2 数组实现（自动扩容）</h2><p>时间复杂度分析：根据均摊复杂度的定义，可以得数组实现（自动扩容）符合大多数情况是O(1)级别复杂度，个别情况是O(n)级别复杂度，比如自动扩容时，会进行完整数据的拷贝。<br />空间复杂度分析：在入栈和出栈的过程中，只需要一两个临时变量存储空间，所以O(1)级别。我们说空间复杂度的时候，是指除了原本的数据存储空间外，算法运行还需要额外的存储空间。</p><p>3.链表实现<br />时间复杂度分析：压栈和弹栈的时间复杂度均为O(1)级别，因为只需更改单个节点的索引即可。<br />空间复杂度分析：在入栈和出栈的过程中，只需要一两个临时变量存储空间，所以O(1)级别。我们说空间复杂度的时候，是指除了原本的数据存储空间外，算法运行还需要额外的存储空间。</p><h1 id="4-栈的应用"><a class="markdownIt-Anchor" href="#4-栈的应用"></a> 4. 栈的应用</h1><h2 id="41-栈在函数调用中的应用"><a class="markdownIt-Anchor" href="#41-栈在函数调用中的应用"></a> 4.1 栈在函数调用中的应用</h2><p>操作系统给每个线程分配了一块独立的内存空间，这块内存被组织成“栈”这种结构，用来存储函数调用时的临时变量。每进入一个函数，就会将其中的临时变量作为栈帧入栈，当被调用函数执行完成，返回之后，将这个函数对应的栈帧出栈。</p><h2 id="42-栈在表达式求值中的应用比如3413944-123"><a class="markdownIt-Anchor" href="#42-栈在表达式求值中的应用比如3413944-123"></a> 4.2 栈在表达式求值中的应用（比如：34+13*9+44-12/3）</h2><p>利用两个栈，其中一个用来保存操作数，另一个用来保存运算符。我们从左向右遍历表达式，当遇到数字，我们就直接压入操作数栈；当遇到运算符，就与运算符栈的栈顶元素进行比较，若比运算符栈顶元素优先级高，就将当前运算符压入栈，若比运算符栈顶元素的优先级低或者相同，从运算符栈中取出栈顶运算符，从操作数栈顶取出2个操作数，然后进行计算，把计算完的结果压入操作数栈，继续比较。</p><h2 id="43-栈在括号匹配中的应用比如"><a class="markdownIt-Anchor" href="#43-栈在括号匹配中的应用比如"></a> 4.3 栈在括号匹配中的应用（比如：{}{<a href="">()</a>}）</h2><p>用栈保存为匹配的左括号，从左到右一次扫描字符串，当扫描到左括号时，则将其压入栈中；当扫描到右括号时，从栈顶取出一个左括号，如果能匹配上，则继续扫描剩下的字符串。如果扫描过程中，遇到不能配对的右括号，或者栈中没有数据，则说明为非法格式。<br />当所有的括号都扫描完成之后，如果栈为空，则说明字符串为合法格式；否则，说明未匹配的左括号为非法格式。</p><h2 id="44-如何实现浏览器的前进后退功能"><a class="markdownIt-Anchor" href="#44-如何实现浏览器的前进后退功能"></a> 4.4 如何实现浏览器的前进后退功能？</h2><p>我们使用两个栈X和Y，我们把首次浏览的页面依次压如栈X，当点击后退按钮时，再依次从栈X中出栈，并将出栈的数据一次放入Y栈。当点击前进按钮时，我们依次从栈Y中取出数据，放入栈X中。当栈X中没有数据时，说明没有页面可以继续后退浏览了。当Y栈没有数据，那就说明没有页面可以点击前进浏览了。</p><h1 id="5-思考"><a class="markdownIt-Anchor" href="#5-思考"></a> 5. 思考</h1><ol><li>我们在讲栈的应用时，讲到用函数调用栈来保存临时变量，为什么函数调用要用“栈”来保存临时变量呢？用其他数据结构不行吗？<br />答：因为函数调用的执行顺序符合后进者先出，先进者后出的特点。比如函数中的局部变量的生命周期的长短是先定义的生命周期长，后定义的生命周期短；还有函数中调用函数也是这样，先开始执行的函数只有等到内部调用的其他函数执行完毕，该函数才能执行结束。<br />正是由于函数调用的这些特点，根据数据结构是特定应用场景的抽象的原则，我们优先考虑栈结构。</li><li>我们都知道，JVM 内存管理中有个“堆栈”的概念。栈内存用来存储局部变量和方法调用，堆内存用来存储 Java 中的对象。那 JVM 里面的“栈”跟我们这里说的“栈”是不是一回事呢？如果不是，那它为什么又叫作“栈”呢？<br />答：JVM里面的栈和我们这里说的是一回事，被称为方法栈。和前面函数调用的作用是一致的，用来存储方法中的局部变量</li></ol><h1 id="6-练习题"><a class="markdownIt-Anchor" href="#6-练习题"></a> 6. 练习题</h1><p>1.有效的括号: <code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/valid-parentheses/">20</a><br />2.最小栈: <code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/min-stack/">155</a><br />3.用栈实现队列: <code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/">232</a><br />4.比较含退格的字符串: <code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/backspace-string-compare/">844</a><br />5.基本计算器: <code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/basic-calculator/">224</a><br />6.棒球比赛: <code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/baseball-game/">682</a><br />7.下一个更大元素: <code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/next-greater-element-i/">496</a></p><h2 id="1-有效的括号"><a class="markdownIt-Anchor" href="#1-有效的括号"></a> 1. 有效的括号</h2><p><code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/valid-parentheses/">20</a></p><h3 id="思路一"><a class="markdownIt-Anchor" href="#思路一"></a> 思路一</h3><ol><li>初始化栈 S。</li><li>一次处理表达式的每个括号。</li><li>如果遇到开括号，我们只需将其推到栈上即可。这意味着我们将稍后处理它，让我们简单地转到前面的 子表达式。</li><li>如果我们遇到一个闭括号，那么我们检查栈顶的元素。如果栈顶的元素是一个 相同类型的 左括号，那么我们将它从栈中弹出并继续处理。否则，这意味着表达式无效。</li><li>如果到最后我们剩下的栈中仍然有元素，那么这意味着表达式无效。</li></ol><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValid</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    schar := []<span class="keyword">rune</span>(s)</span><br><span class="line"><span class="keyword">var</span> stack []<span class="keyword">rune</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(schar); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> schar[i] == <span class="string">&#x27;(&#x27;</span> || schar[i] == <span class="string">&#x27;[&#x27;</span> || schar[i] == <span class="string">&#x27;&#123;&#x27;</span> &#123;</span><br><span class="line">stack = <span class="built_in">append</span>(stack, schar[i])</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(stack) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> schar[i] == <span class="string">&#x27;)&#x27;</span> &#123;</span><br><span class="line">tem := stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">stack = <span class="built_in">append</span>(stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">if</span> tem != <span class="string">&#x27;(&#x27;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> schar[i] == <span class="string">&#x27;]&#x27;</span> &#123;</span><br><span class="line">tem := stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">stack = <span class="built_in">append</span>(stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">if</span> tem != <span class="string">&#x27;[&#x27;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> schar[i] == <span class="string">&#x27;&#125;&#x27;</span> &#123;</span><br><span class="line">tem := stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">stack = <span class="built_in">append</span>(stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">if</span> tem != <span class="string">&#x27;&#123;&#x27;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(stack) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-最小栈"><a class="markdownIt-Anchor" href="#2-最小栈"></a> 2. 最小栈</h2><p><code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/min-stack/">155</a></p><h3 id="思路一-2"><a class="markdownIt-Anchor" href="#思路一-2"></a> 思路一</h3><p>常规思路，普通栈操作+ 一遍遍历最小值</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MinStack <span class="keyword">struct</span> &#123;</span><br><span class="line">    items []<span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** initialize your data structure here. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span> <span class="title">MinStack</span></span> &#123;</span><br><span class="line">    stack := MinStack&#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> stack</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MinStack)</span> <span class="title">Push</span><span class="params">(x <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    this.items = <span class="built_in">append</span>(this.items, x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MinStack)</span> <span class="title">Pop</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    this.items = <span class="built_in">append</span>(this.items[:<span class="built_in">len</span>(this.items) <span class="number">-1</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MinStack)</span> <span class="title">Top</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    res := this.items[<span class="built_in">len</span>(this.items) - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MinStack)</span> <span class="title">GetMin</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    minV := this.items[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i:= <span class="number">0</span>; i &lt; <span class="built_in">len</span>(this.items);i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> minV &gt; this.items[i]&#123;</span><br><span class="line">            minV = this.items[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minV</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-用栈实现队列"><a class="markdownIt-Anchor" href="#3-用栈实现队列"></a> 3. 用栈实现队列</h2><p><code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/">232</a></p><h3 id="思路一-3"><a class="markdownIt-Anchor" href="#思路一-3"></a> 思路一</h3><p>使用两个栈来模拟队列操作</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyQueue <span class="keyword">struct</span> &#123;</span><br><span class="line">    input []<span class="keyword">int</span></span><br><span class="line">    output []<span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span> <span class="title">MyQueue</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> MyQueue&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Push element x to the back of queue. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span> <span class="title">Push</span><span class="params">(x <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">    this.input = <span class="built_in">append</span>(this.input, x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    this.Peek()</span><br><span class="line">    e := this.output[<span class="built_in">len</span>(this.output) - <span class="number">1</span>]</span><br><span class="line">    this.output = this.output[:<span class="built_in">len</span>(this.output) - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Get the front element. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span> <span class="title">Peek</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(this.output) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">len</span>(this.input) &gt; <span class="number">0</span> &#123;</span><br><span class="line">            this.output = <span class="built_in">append</span>(this.output, this.input[<span class="built_in">len</span>(this.input) - <span class="number">1</span>])</span><br><span class="line">            this.input = this.input[:<span class="built_in">len</span>(this.input) - <span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> this.output[<span class="built_in">len</span>(this.output) - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span> <span class="title">Empty</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(this.input) == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(this.output) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-比较含退格的字符串"><a class="markdownIt-Anchor" href="#4-比较含退格的字符串"></a> 4. 比较含退格的字符串</h2><p><code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/backspace-string-compare/">844</a></p><h3 id="思路一-4"><a class="markdownIt-Anchor" href="#思路一-4"></a> 思路一</h3><p>重构字符串，依次压栈，遇到退格就出栈，最后比较两个栈</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">backspaceCompare</span><span class="params">(S <span class="keyword">string</span>, T <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> stackS []<span class="keyword">rune</span></span><br><span class="line">    <span class="keyword">var</span> StackT []<span class="keyword">rune</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> _, item := <span class="keyword">range</span> S &#123;</span><br><span class="line">        <span class="keyword">if</span> item != <span class="string">&#x27;#&#x27;</span> &#123;</span><br><span class="line">            stackS = <span class="built_in">append</span>(stackS,item)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(stackS) &gt;<span class="number">0</span> &#123;</span><br><span class="line">                stackS = stackS[:<span class="built_in">len</span>(stackS) - <span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, item := <span class="keyword">range</span> T&#123;</span><br><span class="line">        <span class="keyword">if</span> item != <span class="string">&#x27;#&#x27;</span> &#123;</span><br><span class="line">            StackT = <span class="built_in">append</span>(StackT,item)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(StackT) &gt;<span class="number">0</span> &#123;</span><br><span class="line">                StackT = StackT[:<span class="built_in">len</span>(StackT) - <span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(stackS) &gt;<span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(StackT)&gt;<span class="number">0</span> &#123;</span><br><span class="line">        itemS := stackS[<span class="built_in">len</span>(stackS)<span class="number">-1</span>]</span><br><span class="line">        itemT := StackT[<span class="built_in">len</span>(StackT)<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> (itemS != itemT)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        stackS = stackS[:<span class="built_in">len</span>(stackS) - <span class="number">1</span>]</span><br><span class="line">        StackT = StackT[:<span class="built_in">len</span>(StackT) - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(stackS) == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(StackT)  == <span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-基本计算器"><a class="markdownIt-Anchor" href="#5-基本计算器"></a> 5. 基本计算器</h2><p><code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/basic-calculator/">224</a></p><h3 id="思路一-5"><a class="markdownIt-Anchor" href="#思路一-5"></a> 思路一</h3><p>在遍历s的过程中，再未遇到’(‘之前，一直计算并累计当前的计算结果；遇到’('时，将当前计算结果压栈。<br />另外，通过引入sign符号，避免对&quot;+&quot;、“-”号的多次判断：</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calculate</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">stack := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">res := <span class="number">0</span></span><br><span class="line">sign := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span> ; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> s[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;9&#x27;</span> &#123;</span><br><span class="line">num := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> s[i] &lt; <span class="string">&#x27;0&#x27;</span> || s[i] &gt; <span class="string">&#x27;9&#x27;</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">num = num*<span class="number">10</span> + <span class="keyword">int</span>(s[i]-<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">res = res + sign*num</span><br><span class="line">i--</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">switch</span> s[i] &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">sign = <span class="number">1</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">sign = <span class="number">-1</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">stack = <span class="built_in">append</span>(stack, res, sign)</span><br><span class="line">res, sign = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">sign := stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">num := stack[<span class="built_in">len</span>(stack)<span class="number">-2</span>]</span><br><span class="line">res = num + sign*res</span><br><span class="line">stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-2</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-棒球比赛"><a class="markdownIt-Anchor" href="#6-棒球比赛"></a> 6. 棒球比赛</h2><p><code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/baseball-game/">682</a></p><h3 id="思路一-6"><a class="markdownIt-Anchor" href="#思路一-6"></a> 思路一</h3><ol><li>准备一个栈保存数据</li><li>从前往后遍历ops</li><li>如果是+ 计算stack 最后两位的加和score, 并把score入栈</li><li>如果是D 计算stack 最后一位的两倍score,并把score入栈</li><li>如果是C stack 栈顶出栈</li><li>遍历stack,计算加和</li></ol><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">calPoints</span><span class="params">(ops []<span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> stack []<span class="keyword">int</span></span><br><span class="line">    res := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(ops); i++ &#123;</span><br><span class="line">       </span><br><span class="line">            <span class="keyword">switch</span> ops[i] &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                score := stack[<span class="built_in">len</span>(stack) <span class="number">-1</span> ]+ stack[<span class="built_in">len</span>(stack)<span class="number">-2</span>]</span><br><span class="line">                stack = <span class="built_in">append</span>(stack, score)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;D&quot;</span>:</span><br><span class="line">                 score := stack[<span class="built_in">len</span>(stack) <span class="number">-1</span> ] * <span class="number">2</span> </span><br><span class="line">                 stack = <span class="built_in">append</span>(stack, score)</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;C&quot;</span>:</span><br><span class="line">                stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                num,_ := strconv.Atoi(ops[i])</span><br><span class="line">                stack = <span class="built_in">append</span>(stack,num)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(stack); i++&#123;</span><br><span class="line">        res = res + stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>-i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-下一个更大元素"><a class="markdownIt-Anchor" href="#7-下一个更大元素"></a> 7. 下一个更大元素</h2><p><code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/next-greater-element-i/">496</a></p><h3 id="思路一-7"><a class="markdownIt-Anchor" href="#思路一-7"></a> 思路一</h3><p>先找到num2的单调增的栈 + map 记录</p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">nextGreaterElement</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">var</span> stack []<span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> nums2 &#123;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(stack) != <span class="number">0</span> &amp;&amp; v &gt; stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>] &#123;</span><br><span class="line">m[stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]] = v</span><br><span class="line">stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line">stack = <span class="built_in">append</span>(stack, v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(stack) != <span class="number">0</span> &#123;</span><br><span class="line">m[stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]] = <span class="number">-1</span></span><br><span class="line">stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> nums1 &#123;</span><br><span class="line">nums1[k] = m[v]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nums1</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="/2020/08/01/Data%20Structure%20and%20Algorithm/%E9%93%BE%E8%A1%A8/"/>
      <url>/2020/08/01/Data%20Structure%20and%20Algorithm/%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-常见的链表结构"><a class="markdownIt-Anchor" href="#1-常见的链表结构"></a> 1. 常见的链表结构</h1><h1 id="11-单链表"><a class="markdownIt-Anchor" href="#11-单链表"></a> 1.1  单链表：</h1><p>每个节点除了存储数据之外，还有记录下一个节点的地址，这样才能串联起来，记录下一个节点地址的指针就是「后续指针next」。其中有两个特殊的节点为「头结点」和「尾节点」，头结点记录链表的基地址，尾节点记录下一个节点地址是NULL，代表链表的最后一个节点。</p><ul><li><p>链表增删效率高<br />对于链表（存储数据无需连续性）的增删，只需要考虑指针的改变，复杂度为O（1）。</p></li><li><p>链表访问慢<br />由于不像数组那样可以根据首选地址和下标计算出内存地址，只能通过遍历节点获取地址。时间复杂度为0（n）。</p></li></ul><h2 id="12-循环链表"><a class="markdownIt-Anchor" href="#12-循环链表"></a> 1.2 循环链表</h2><p>是特殊的单链表，尾节点指针指向链表的头结点。</p><h2 id="13-双向链表"><a class="markdownIt-Anchor" href="#13-双向链表"></a> 1.3 双向链表</h2><p>支持双向，除了「后续指针next」还有「前驱指针prev」<br />相比单链表和双链表，增删查效率高，内存消耗高。</p><h2 id="14-空间换时间时间换空间"><a class="markdownIt-Anchor" href="#14-空间换时间时间换空间"></a> 1.4 空间换时间，时间换空间</h2><p>对于执行慢的程序–&gt;空间换时间<br />对于消耗内存多的程序–&gt;时间换空间</p><h1 id="2-链表和数组的区别"><a class="markdownIt-Anchor" href="#2-链表和数组的区别"></a> 2. 链表和数组的区别</h1><h2 id="21-底层存储结构"><a class="markdownIt-Anchor" href="#21-底层存储结构"></a> 2.1 底层存储结构：</h2><p>数组需要一块连续的内存空间存储<br />链表通过“指针”将一组零散的内存块串联起来使用</p><h2 id="22-性能"><a class="markdownIt-Anchor" href="#22-性能"></a> 2.2 性能：</h2><ol><li><p>链表和数组的（增删查）时间复杂度正好相反。</p></li><li><p>数组使用连续的内存空间，可以借助缓存机制提高效率。<br />链表不连续，所以无法借助缓存机制。</p></li><li><p>数组大小固定，当要申请更大的空间，需要拷贝数据，很耗时。<br />链表则支持动态扩容。</p></li><li><p>相对来说链表比较耗内存，因为需要记录节点指针，内存消耗翻倍。</p></li></ol><h1 id="3-如何优雅的写出链表代码"><a class="markdownIt-Anchor" href="#3-如何优雅的写出链表代码"></a> 3. 如何优雅的写出链表代码</h1><h2 id="31-理解指针或引用的含义"><a class="markdownIt-Anchor" href="#31-理解指针或引用的含义"></a> 3.1 理解指针或引用的含义</h2><ol><li>含义：将某个变量（对象）赋值给指针（引用），实际上就是就是将这个变量（对象）的地址赋值给指针（引用）。</li><li>示例：<br />p—&gt;next = q; 表示p节点的后继指针存储了q节点的内存地址。<br />p—&gt;next = p—&gt;next—&gt;next; 表示p节点的后继指针存储了p节点的下下个节点的内存地址。</li></ol><h2 id="32-警惕指针丢失和内存泄漏单链表"><a class="markdownIt-Anchor" href="#32-警惕指针丢失和内存泄漏单链表"></a> 3.2 警惕指针丢失和内存泄漏（单链表）</h2><h3 id="321-插入节点"><a class="markdownIt-Anchor" href="#321-插入节点"></a> 3.2.1 插入节点</h3><p>在节点a和节点b之间插入节点x，b是a的下一节点，，p指针指向节点a，则造成指针丢失和内存泄漏的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p—&gt;next = x;</span><br><span class="line">x—&gt;next = p—&gt;next; </span><br></pre></td></tr></table></figure><p>显然这会导致x节点的后继指针指向自身。<br />正确的写法是2句代码交换顺序，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x—&gt;next = p—&gt;next; </span><br><span class="line">p—&gt;next = x;</span><br></pre></td></tr></table></figure><h3 id="322-删除节点"><a class="markdownIt-Anchor" href="#322-删除节点"></a> 3.2.2 删除节点</h3><p>在节点a和节点b之间删除节点b，b是a的下一节点，p指针指向节点a：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p—&gt;next = p—&gt;next—&gt;next;</span><br></pre></td></tr></table></figure><h2 id="33-利用哨兵简化实现难度"><a class="markdownIt-Anchor" href="#33-利用哨兵简化实现难度"></a> 3.3 利用“哨兵”简化实现难度</h2><h3 id="331-什么是哨兵"><a class="markdownIt-Anchor" href="#331-什么是哨兵"></a> 3.3.1 什么是“哨兵”？</h3><p>链表中的“哨兵”节点是解决边界问题的，不参与业务逻辑。如果我们引入“哨兵”节点，则不管链表是否为空，head指针都会指向这个“哨兵”节点。我们把这种有“哨兵”节点的链表称为带头链表，相反，没有“哨兵”节点的链表就称为不带头链表。</p><h3 id="332-未引入哨兵的情况"><a class="markdownIt-Anchor" href="#332-未引入哨兵的情况"></a> 3.3.2 未引入“哨兵”的情况</h3><p>如果在p节点后插入一个节点，只需2行代码即可搞定：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new_node—&gt;next = p—&gt;next;</span><br><span class="line">p—&gt;next = new_node;</span><br></pre></td></tr></table></figure><p>但，若向空链表中插入一个节点，则代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(head == null)&#123;</span><br><span class="line">    head = new_node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要删除节点p的后继节点，只需1行代码即可搞定：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p—&gt;next = p—&gt;next—&gt;next;</span><br></pre></td></tr></table></figure><p>但，若是删除链表的最后一个节点（链表中只剩下这个节点），则代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(head—&gt;next == null)&#123;</span><br><span class="line">head = null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的情况可以看出，针对链表的插入、删除操作，需要对插入第一个节点和删除最后一个节点的情况进行特殊处理。这样代码就会显得很繁琐，所以引入“哨兵”节点来解决这个问题。</p><h3 id="333-引入哨兵的情况"><a class="markdownIt-Anchor" href="#333-引入哨兵的情况"></a> 3.3.3 引入“哨兵”的情况</h3><p>“哨兵”节点不存储数据，无论链表是否为空，head指针都会指向它，作为链表的头结点始终存在。这样，插入第一个节点和插入其他节点，删除最后一个节点和删除其他节点都可以统一为相同的代码实现逻辑了。</p><h3 id="334-哨兵还有哪些应用场景"><a class="markdownIt-Anchor" href="#334-哨兵还有哪些应用场景"></a> 3.3.4 “哨兵”还有哪些应用场景？</h3><p>但总结起来，哨兵最大的作用就是简化边界条件的处理。</p><h2 id="34-重点留意边界条件处理"><a class="markdownIt-Anchor" href="#34-重点留意边界条件处理"></a> 3.4 重点留意边界条件处理</h2><p>经常用来检查链表是否正确的边界4个边界条件：<br />1.如果链表为空时，代码是否能正常工作？<br />2.如果链表只包含一个节点时，代码是否能正常工作？<br />3.如果链表只包含两个节点时，代码是否能正常工作？<br />4.代码逻辑在处理头尾节点时是否能正常工作？</p><h2 id="35-举例画图辅助思考"><a class="markdownIt-Anchor" href="#35-举例画图辅助思考"></a> 3.5 举例画图，辅助思考</h2><p>核心思想：释放脑容量，留更多的给逻辑思考，这样就会感觉到思路清晰很多。</p><h2 id="36-多写多练没有捷径"><a class="markdownIt-Anchor" href="#36-多写多练没有捷径"></a> 3.6 多写多练，没有捷径</h2><p>0.请判断一个链表是否为回文链表 :<code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/palindrome-linked-list">234</a></p><p>5个常见的链表操作：<br />1.单链表反转 : <code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/reverse-linked-list/">206</a><br />2.链表中环的检测 :<code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/linked-list-cycle/">141</a><br />3.两个有序链表合并:<code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">21</a><br />4.删除链表倒数第n个节点:<code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19</a><br />5.求链表的中间节点:<code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/">876</a></p><h1 id="4-练习题"><a class="markdownIt-Anchor" href="#4-练习题"></a> 4 练习题</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">    Val  <span class="keyword">int</span></span><br><span class="line">    Next *ListNode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0-请判断一个链表是否为回文链表"><a class="markdownIt-Anchor" href="#0-请判断一个链表是否为回文链表"></a> 0. 请判断一个链表是否为回文链表。</h2><p><code>leetcode</code>题号: <a href="https://leetcode-cn.com/problems/palindrome-linked-list">234</a></p><h3 id="思路一"><a